apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: custom-cluster # Name of the EKS cluster
  region: ap-northeast-2
  version: "1.29" # Kubernetes version

# availabilityZones: ["ap-northeast-2", "ap-northeast-3"]

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: aws-node
      namespace: kube-system
      labels: {aws-usage: "application"}
    wellKnownPolicies:
      imageBuilder: true
      autoScaler: true
      awsLoadBalancerController: true
      externalDNS: true
      certManager: true
      ebsCSIController: true
      efsCSIController: true
    attachPolicyARNs:
    - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    - "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
    - "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess" ### end
    - "arn:aws:iam::aws:policy/AutoScalingFullAccess"
    - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"

accessConfig:
  authenticationMode: API_AND_CONFIG_MAP
  accessEntries:
  - principalARN: arn:aws:iam::360110288814:user/eks
    type: STANDARD
    accessPolicies: # optional access polices
    - policyARN: arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy
      accessScope:
        type: cluster


managedNodeGroups:
- name: managed-ng-1
  amiFamily: AmazonLinux2 # Ubuntu2204, AmazonLinux2 ...
  instanceTypes: ["t4g.small"] # small, medium, large, xlarge
  # ami: ami-098c6080b06dab15c

  volumeSize: 16 # EBS
  ebsOptimized: true
  volumeType: gp3 # gp3, io1

  spot: false # otherwise on-demand

  minSize: 2 # #EC2s (Nodes)
  maxSize: 6 # #EC2s
  desiredCapacity: 4 # #EC2s
  maxPodsPerNode: 4

  labels: # Nodes labels
    role: managed-worker
  tags: # Instances
    nodegroup-role: worker
  propagateASGTags: true

  iam: # IAM policies for instances in this node group
    withAddonPolicies:
      albIngress: true
      imageBuilder: true
      autoScaler: true
      awsLoadBalancerController: true
      externalDNS: true
      certManager: true
      appMesh: true
      appMeshPreview: true
      ebs: true
      fsx: true
      efs: true
      xRay: true
      cloudWatch: true
    attachPolicyARNs:
    # - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
    # - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
    # - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
    # - arn:aws:iam::aws:policy/AmazonEKSServiceRolePolicy	
    # - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController		
    # - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    # - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  ssh:
    allow: true
    # Path to the SSH public key, cmd: ssh-keygen -> ec2_id_rsa
    publicKeyPath: ~/.ssh/ec2_id_rsa.pub
    # sourceSecurityGroupIds: ["sg-00241fbb12c607007"]
  # securityGroups:
  #   attachIDs: ["sg-1234"]
  # privateNetworking: true
  # availabilityZones: ["us-east-2b"] # EC2s

  # overrideBootstrapCommand: |
  #   #!/bin/bash
  # /etc/eks/bootstrap.sh managed-cluster --kubelet-extra-args '--node-labels=eks.amazonaws.com/nodegroup=custom-ng,eks.amazonaws.com/nodegroup-image=ami-0e124de4755b2734d'

# Unmanaged node groups
# nodeGroups:

cloudWatch:
  clusterLogging:
    enableTypes: ["*"]
    logRetentionInDays: 7

# eksctl create cluster -f eks-cluster.yaml --dry-run
