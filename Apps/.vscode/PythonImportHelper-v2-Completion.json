[
	{
		"label": "add_packages",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "add_packages",
		"description": "add_packages",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "config",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "config",
		"description": "config",
		"detail": "config",
		"documentation": {}
	},
	{
		"label": "VTC",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "general_chat",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "VTC",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "general_chat",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "VTC",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "VTC",
		"importPath": "use_cases",
		"description": "use_cases",
		"isExtraImport": true,
		"detail": "use_cases",
		"documentation": {}
	},
	{
		"label": "my_gradio.chatbot",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "gradio",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "gradio",
		"description": "gradio",
		"detail": "gradio",
		"documentation": {}
	},
	{
		"label": "warnings",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "warnings",
		"description": "warnings",
		"detail": "warnings",
		"documentation": {}
	},
	{
		"label": "time",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "time",
		"description": "time",
		"detail": "time",
		"documentation": {}
	},
	{
		"label": "uuid",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "uuid",
		"description": "uuid",
		"detail": "uuid",
		"documentation": {}
	},
	{
		"label": "conversation_chain",
		"importPath": "use_cases.general_chat",
		"description": "use_cases.general_chat",
		"isExtraImport": true,
		"detail": "use_cases.general_chat",
		"documentation": {}
	},
	{
		"label": "os",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "os",
		"description": "os",
		"detail": "os",
		"documentation": {}
	},
	{
		"label": "logger",
		"importPath": "loguru",
		"description": "loguru",
		"isExtraImport": true,
		"detail": "loguru",
		"documentation": {}
	},
	{
		"label": "logger",
		"importPath": "loguru",
		"description": "loguru",
		"isExtraImport": true,
		"detail": "loguru",
		"documentation": {}
	},
	{
		"label": "logger",
		"importPath": "loguru",
		"description": "loguru",
		"isExtraImport": true,
		"detail": "loguru",
		"documentation": {}
	},
	{
		"label": "logger",
		"importPath": "loguru",
		"description": "loguru",
		"isExtraImport": true,
		"detail": "loguru",
		"documentation": {}
	},
	{
		"label": "logger",
		"importPath": "loguru",
		"description": "loguru",
		"isExtraImport": true,
		"detail": "loguru",
		"documentation": {}
	},
	{
		"label": "faiss",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "qdrant",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "chroma",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "docarray",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "faiss",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "qdrant",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "chroma",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "docarray",
		"importPath": "langchain_community.vectorstores",
		"description": "langchain_community.vectorstores",
		"isExtraImport": true,
		"detail": "langchain_community.vectorstores",
		"documentation": {}
	},
	{
		"label": "OpenAIEmbeddings",
		"importPath": "langchain_openai",
		"description": "langchain_openai",
		"isExtraImport": true,
		"detail": "langchain_openai",
		"documentation": {}
	},
	{
		"label": "ChatOpenAI",
		"importPath": "langchain_openai",
		"description": "langchain_openai",
		"isExtraImport": true,
		"detail": "langchain_openai",
		"documentation": {}
	},
	{
		"label": "OpenAI",
		"importPath": "langchain_openai",
		"description": "langchain_openai",
		"isExtraImport": true,
		"detail": "langchain_openai",
		"documentation": {}
	},
	{
		"label": "OpenAIEmbeddings",
		"importPath": "langchain_openai",
		"description": "langchain_openai",
		"isExtraImport": true,
		"detail": "langchain_openai",
		"documentation": {}
	},
	{
		"label": "OpenAIEmbeddings",
		"importPath": "langchain_openai",
		"description": "langchain_openai",
		"isExtraImport": true,
		"detail": "langchain_openai",
		"documentation": {}
	},
	{
		"label": "create_retriever_tool",
		"importPath": "langchain.tools.retriever",
		"description": "langchain.tools.retriever",
		"isExtraImport": true,
		"detail": "langchain.tools.retriever",
		"documentation": {}
	},
	{
		"label": "create_retriever_tool",
		"importPath": "langchain.tools.retriever",
		"description": "langchain.tools.retriever",
		"isExtraImport": true,
		"detail": "langchain.tools.retriever",
		"documentation": {}
	},
	{
		"label": "ContextualCompressionRetriever",
		"importPath": "langchain.retrievers",
		"description": "langchain.retrievers",
		"isExtraImport": true,
		"detail": "langchain.retrievers",
		"documentation": {}
	},
	{
		"label": "ContextualCompressionRetriever",
		"importPath": "langchain.retrievers",
		"description": "langchain.retrievers",
		"isExtraImport": true,
		"detail": "langchain.retrievers",
		"documentation": {}
	},
	{
		"label": "EnsembleRetriever",
		"importPath": "langchain.retrievers",
		"description": "langchain.retrievers",
		"isExtraImport": true,
		"detail": "langchain.retrievers",
		"documentation": {}
	},
	{
		"label": "RePhraseQueryRetriever",
		"importPath": "langchain.retrievers",
		"description": "langchain.retrievers",
		"isExtraImport": true,
		"detail": "langchain.retrievers",
		"documentation": {}
	},
	{
		"label": "ContextualCompressionRetriever",
		"importPath": "langchain.retrievers",
		"description": "langchain.retrievers",
		"isExtraImport": true,
		"detail": "langchain.retrievers",
		"documentation": {}
	},
	{
		"label": "Document",
		"importPath": "langchain_core.documents",
		"description": "langchain_core.documents",
		"isExtraImport": true,
		"detail": "langchain_core.documents",
		"documentation": {}
	},
	{
		"label": "Document",
		"importPath": "langchain_core.documents",
		"description": "langchain_core.documents",
		"isExtraImport": true,
		"detail": "langchain_core.documents",
		"documentation": {}
	},
	{
		"label": "Document",
		"importPath": "langchain_core.documents",
		"description": "langchain_core.documents",
		"isExtraImport": true,
		"detail": "langchain_core.documents",
		"documentation": {}
	},
	{
		"label": "Document",
		"importPath": "langchain_core.documents",
		"description": "langchain_core.documents",
		"isExtraImport": true,
		"detail": "langchain_core.documents",
		"documentation": {}
	},
	{
		"label": "qdrant_client",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "qdrant_client",
		"description": "qdrant_client",
		"detail": "qdrant_client",
		"documentation": {}
	},
	{
		"label": "models",
		"importPath": "qdrant_client.http",
		"description": "qdrant_client.http",
		"isExtraImport": true,
		"detail": "qdrant_client.http",
		"documentation": {}
	},
	{
		"label": "models",
		"importPath": "qdrant_client.http",
		"description": "qdrant_client.http",
		"isExtraImport": true,
		"detail": "qdrant_client.http",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "pprint",
		"importPath": "pprint",
		"description": "pprint",
		"isExtraImport": true,
		"detail": "pprint",
		"documentation": {}
	},
	{
		"label": "tqdm",
		"importPath": "tqdm",
		"description": "tqdm",
		"isExtraImport": true,
		"detail": "tqdm",
		"documentation": {}
	},
	{
		"label": "tqdm",
		"importPath": "tqdm",
		"description": "tqdm",
		"isExtraImport": true,
		"detail": "tqdm",
		"documentation": {}
	},
	{
		"label": "sys",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "sys",
		"description": "sys",
		"detail": "sys",
		"documentation": {}
	},
	{
		"label": "dotenv",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "dotenv",
		"description": "dotenv",
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "load_dotenv",
		"importPath": "dotenv",
		"description": "dotenv",
		"isExtraImport": true,
		"detail": "dotenv",
		"documentation": {}
	},
	{
		"label": "yaml,",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "yaml.",
		"description": "yaml.",
		"detail": "yaml.",
		"documentation": {}
	},
	{
		"label": "Agent",
		"importPath": "crewai",
		"description": "crewai",
		"isExtraImport": true,
		"detail": "crewai",
		"documentation": {}
	},
	{
		"label": "Task",
		"importPath": "crewai",
		"description": "crewai",
		"isExtraImport": true,
		"detail": "crewai",
		"documentation": {}
	},
	{
		"label": "Agent",
		"importPath": "crewai",
		"description": "crewai",
		"isExtraImport": true,
		"detail": "crewai",
		"documentation": {}
	},
	{
		"label": "Task",
		"importPath": "crewai",
		"description": "crewai",
		"isExtraImport": true,
		"detail": "crewai",
		"documentation": {}
	},
	{
		"label": "BeautifulSoup",
		"importPath": "bs4",
		"description": "bs4",
		"isExtraImport": true,
		"detail": "bs4",
		"documentation": {}
	},
	{
		"label": "tool",
		"importPath": "my_langchain.agent_tools",
		"description": "my_langchain.agent_tools",
		"isExtraImport": true,
		"detail": "my_langchain.agent_tools",
		"documentation": {}
	},
	{
		"label": "document_loaders",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "text_splitters",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "documents",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "agent_tools",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "histories",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "runnables",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "prompts",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "chat_models",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "document_loaders",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "text_splitters",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "text_embedding_models",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "chat_models",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "prompts",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "utils",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "output_parsers",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "agents",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "documents",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "vectorstores",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "llms",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "memories",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "chains",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "prompts",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "chat_models",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "prompts",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "output_parsers",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "chains",
		"importPath": "my_langchain",
		"description": "my_langchain",
		"isExtraImport": true,
		"detail": "my_langchain",
		"documentation": {}
	},
	{
		"label": "VT",
		"importPath": "curses.ascii",
		"description": "curses.ascii",
		"isExtraImport": true,
		"detail": "curses.ascii",
		"documentation": {}
	},
	{
		"label": "BaseTool",
		"importPath": "langchain.tools",
		"description": "langchain.tools",
		"isExtraImport": true,
		"detail": "langchain.tools",
		"documentation": {}
	},
	{
		"label": "StructuredTool",
		"importPath": "langchain.tools",
		"description": "langchain.tools",
		"isExtraImport": true,
		"detail": "langchain.tools",
		"documentation": {}
	},
	{
		"label": "tool",
		"importPath": "langchain.tools",
		"description": "langchain.tools",
		"isExtraImport": true,
		"detail": "langchain.tools",
		"documentation": {}
	},
	{
		"label": "ToolException",
		"importPath": "langchain_core.tools",
		"description": "langchain_core.tools",
		"isExtraImport": true,
		"detail": "langchain_core.tools",
		"documentation": {}
	},
	{
		"label": "BaseTool",
		"importPath": "langchain_core.tools",
		"description": "langchain_core.tools",
		"isExtraImport": true,
		"detail": "langchain_core.tools",
		"documentation": {}
	},
	{
		"label": "langchain_community.tools",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "langchain_community.tools",
		"description": "langchain_community.tools",
		"detail": "langchain_community.tools",
		"documentation": {}
	},
	{
		"label": "load_tools",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "Tool",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "create_openai_tools_agent",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "create_openai_functions_agent",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "create_react_agent",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "create_self_ask_with_search_agent",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "create_xml_agent",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "AgentExecutor",
		"importPath": "langchain.agents",
		"description": "langchain.agents",
		"isExtraImport": true,
		"detail": "langchain.agents",
		"documentation": {}
	},
	{
		"label": "TavilySearchResults",
		"importPath": "langchain_community.tools.tavily_search",
		"description": "langchain_community.tools.tavily_search",
		"isExtraImport": true,
		"detail": "langchain_community.tools.tavily_search",
		"documentation": {}
	},
	{
		"label": "TavilyAnswer",
		"importPath": "langchain_community.tools.tavily_search",
		"description": "langchain_community.tools.tavily_search",
		"isExtraImport": true,
		"detail": "langchain_community.tools.tavily_search",
		"documentation": {}
	},
	{
		"label": "DuckDuckGoSearchRun",
		"importPath": "langchain_community.tools.ddg_search.tool",
		"description": "langchain_community.tools.ddg_search.tool",
		"isExtraImport": true,
		"detail": "langchain_community.tools.ddg_search.tool",
		"documentation": {}
	},
	{
		"label": "E2BDataAnalysisTool",
		"importPath": "langchain_community.tools.e2b_data_analysis.tool",
		"description": "langchain_community.tools.e2b_data_analysis.tool",
		"isExtraImport": true,
		"detail": "langchain_community.tools.e2b_data_analysis.tool",
		"documentation": {}
	},
	{
		"label": "MoveFileTool",
		"importPath": "langchain_community.tools.file_management",
		"description": "langchain_community.tools.file_management",
		"isExtraImport": true,
		"detail": "langchain_community.tools.file_management",
		"documentation": {}
	},
	{
		"label": "WikipediaQueryRun",
		"importPath": "langchain_community.tools.wikipedia.tool",
		"description": "langchain_community.tools.wikipedia.tool",
		"isExtraImport": true,
		"detail": "langchain_community.tools.wikipedia.tool",
		"documentation": {}
	},
	{
		"label": "WikipediaAPIWrapper",
		"importPath": "langchain_community.utilities.wikipedia",
		"description": "langchain_community.utilities.wikipedia",
		"isExtraImport": true,
		"detail": "langchain_community.utilities.wikipedia",
		"documentation": {}
	},
	{
		"label": "BaseModel",
		"importPath": "langchain.pydantic_v1",
		"description": "langchain.pydantic_v1",
		"isExtraImport": true,
		"detail": "langchain.pydantic_v1",
		"documentation": {}
	},
	{
		"label": "Field",
		"importPath": "langchain.pydantic_v1",
		"description": "langchain.pydantic_v1",
		"isExtraImport": true,
		"detail": "langchain.pydantic_v1",
		"documentation": {}
	},
	{
		"label": "AsyncCallbackManagerForToolRun",
		"importPath": "langchain.callbacks.manager",
		"description": "langchain.callbacks.manager",
		"isExtraImport": true,
		"detail": "langchain.callbacks.manager",
		"documentation": {}
	},
	{
		"label": "CallbackManagerForToolRun",
		"importPath": "langchain.callbacks.manager",
		"description": "langchain.callbacks.manager",
		"isExtraImport": true,
		"detail": "langchain.callbacks.manager",
		"documentation": {}
	},
	{
		"label": "convert_to_openai_function",
		"importPath": "langchain_core.utils.function_calling",
		"description": "langchain_core.utils.function_calling",
		"isExtraImport": true,
		"detail": "langchain_core.utils.function_calling",
		"documentation": {}
	},
	{
		"label": "PythonREPL",
		"importPath": "langchain_experimental.utilities",
		"description": "langchain_experimental.utilities",
		"isExtraImport": true,
		"detail": "langchain_experimental.utilities",
		"documentation": {}
	},
	{
		"label": "typing",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "typing",
		"description": "typing",
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "Union",
		"importPath": "typing",
		"description": "typing",
		"isExtraImport": true,
		"detail": "typing",
		"documentation": {}
	},
	{
		"label": "BaseChatModel",
		"importPath": "langchain_core.language_models.chat_models",
		"description": "langchain_core.language_models.chat_models",
		"isExtraImport": true,
		"detail": "langchain_core.language_models.chat_models",
		"documentation": {}
	},
	{
		"label": "BaseChatModel",
		"importPath": "langchain_core.language_models.chat_models",
		"description": "langchain_core.language_models.chat_models",
		"isExtraImport": true,
		"detail": "langchain_core.language_models.chat_models",
		"documentation": {}
	},
	{
		"label": "BaseChatPromptTemplate",
		"importPath": "langchain_core.prompts.chat",
		"description": "langchain_core.prompts.chat",
		"isExtraImport": true,
		"detail": "langchain_core.prompts.chat",
		"documentation": {}
	},
	{
		"label": "Runnable",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "Runnable",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "Runnable",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "RunnablePassthrough",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "RunnableParallel",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "RunnableLambda",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "ConfigurableField",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "chain",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "ConfigurableFieldSpec",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "RunnableBranch",
		"importPath": "langchain_core.runnables",
		"description": "langchain_core.runnables",
		"isExtraImport": true,
		"detail": "langchain_core.runnables",
		"documentation": {}
	},
	{
		"label": "OpenAIAssistantRunnable",
		"importPath": "langchain.agents.openai_assistant",
		"description": "langchain.agents.openai_assistant",
		"isExtraImport": true,
		"detail": "langchain.agents.openai_assistant",
		"documentation": {}
	},
	{
		"label": "format_to_openai_tool_messages",
		"importPath": "langchain.agents.format_scratchpad.openai_tools",
		"description": "langchain.agents.format_scratchpad.openai_tools",
		"isExtraImport": true,
		"detail": "langchain.agents.format_scratchpad.openai_tools",
		"documentation": {}
	},
	{
		"label": "format_to_openai_function_messages",
		"importPath": "langchain.agents.format_scratchpad",
		"description": "langchain.agents.format_scratchpad",
		"isExtraImport": true,
		"detail": "langchain.agents.format_scratchpad",
		"documentation": {}
	},
	{
		"label": "OpenAIToolsAgentOutputParser",
		"importPath": "langchain.agents.output_parsers.openai_tools",
		"description": "langchain.agents.output_parsers.openai_tools",
		"isExtraImport": true,
		"detail": "langchain.agents.output_parsers.openai_tools",
		"documentation": {}
	},
	{
		"label": "AgentActionMessageLog",
		"importPath": "langchain_core.agents",
		"description": "langchain_core.agents",
		"isExtraImport": true,
		"detail": "langchain_core.agents",
		"documentation": {}
	},
	{
		"label": "AgentFinish",
		"importPath": "langchain_core.agents",
		"description": "langchain_core.agents",
		"isExtraImport": true,
		"detail": "langchain_core.agents",
		"documentation": {}
	},
	{
		"label": "RetrievalQA",
		"importPath": "langchain.chains.retrieval_qa.base",
		"description": "langchain.chains.retrieval_qa.base",
		"isExtraImport": true,
		"detail": "langchain.chains.retrieval_qa.base",
		"documentation": {}
	},
	{
		"label": "LLMChain",
		"importPath": "langchain.chains.llm",
		"description": "langchain.chains.llm",
		"isExtraImport": true,
		"detail": "langchain.chains.llm",
		"documentation": {}
	},
	{
		"label": "ConversationChain",
		"importPath": "langchain.chains.conversation.base",
		"description": "langchain.chains.conversation.base",
		"isExtraImport": true,
		"detail": "langchain.chains.conversation.base",
		"documentation": {}
	},
	{
		"label": "create_stuff_documents_chain",
		"importPath": "langchain.chains.combine_documents",
		"description": "langchain.chains.combine_documents",
		"isExtraImport": true,
		"detail": "langchain.chains.combine_documents",
		"documentation": {}
	},
	{
		"label": "AttributeInfo",
		"importPath": "langchain.chains.query_constructor.schema",
		"description": "langchain.chains.query_constructor.schema",
		"isExtraImport": true,
		"detail": "langchain.chains.query_constructor.schema",
		"documentation": {}
	},
	{
		"label": "os,",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "os.",
		"description": "os.",
		"detail": "os.",
		"documentation": {}
	},
	{
		"label": "ChatAnthropic",
		"importPath": "langchain_anthropic",
		"description": "langchain_anthropic",
		"isExtraImport": true,
		"detail": "langchain_anthropic",
		"documentation": {}
	},
	{
		"label": "ChatCohere",
		"importPath": "langchain_cohere",
		"description": "langchain_cohere",
		"isExtraImport": true,
		"detail": "langchain_cohere",
		"documentation": {}
	},
	{
		"label": "CohereRerank",
		"importPath": "langchain_cohere",
		"description": "langchain_cohere",
		"isExtraImport": true,
		"detail": "langchain_cohere",
		"documentation": {}
	},
	{
		"label": "CohereRagRetriever",
		"importPath": "langchain_cohere",
		"description": "langchain_cohere",
		"isExtraImport": true,
		"detail": "langchain_cohere",
		"documentation": {}
	},
	{
		"label": "CohereEmbeddings",
		"importPath": "langchain_cohere",
		"description": "langchain_cohere",
		"isExtraImport": true,
		"detail": "langchain_cohere",
		"documentation": {}
	},
	{
		"label": "ChatGroq",
		"importPath": "langchain_groq",
		"description": "langchain_groq",
		"isExtraImport": true,
		"detail": "langchain_groq",
		"documentation": {}
	},
	{
		"label": "TextLoader",
		"importPath": "langchain_community.document_loaders.text",
		"description": "langchain_community.document_loaders.text",
		"isExtraImport": true,
		"detail": "langchain_community.document_loaders.text",
		"documentation": {}
	},
	{
		"label": "WebBaseLoader",
		"importPath": "langchain_community.document_loaders.web_base",
		"description": "langchain_community.document_loaders.web_base",
		"isExtraImport": true,
		"detail": "langchain_community.document_loaders.web_base",
		"documentation": {}
	},
	{
		"label": "CSVLoader",
		"importPath": "langchain_community.document_loaders.csv_loader",
		"description": "langchain_community.document_loaders.csv_loader",
		"isExtraImport": true,
		"detail": "langchain_community.document_loaders.csv_loader",
		"documentation": {}
	},
	{
		"label": "UnstructuredMarkdownLoader",
		"importPath": "langchain_community.document_loaders.markdown",
		"description": "langchain_community.document_loaders.markdown",
		"isExtraImport": true,
		"detail": "langchain_community.document_loaders.markdown",
		"documentation": {}
	},
	{
		"label": "UnstructuredPDFLoader",
		"importPath": "langchain_community.document_loaders.pdf",
		"description": "langchain_community.document_loaders.pdf",
		"isExtraImport": true,
		"detail": "langchain_community.document_loaders.pdf",
		"documentation": {}
	},
	{
		"label": "ChatMessageHistory",
		"importPath": "langchain_community.chat_message_histories.in_memory",
		"description": "langchain_community.chat_message_histories.in_memory",
		"isExtraImport": true,
		"detail": "langchain_community.chat_message_histories.in_memory",
		"documentation": {}
	},
	{
		"label": "BaseChatMessageHistory",
		"importPath": "langchain_core.chat_history",
		"description": "langchain_core.chat_history",
		"isExtraImport": true,
		"detail": "langchain_core.chat_history",
		"documentation": {}
	},
	{
		"label": "ConversationBufferMemory",
		"importPath": "langchain.memory",
		"description": "langchain.memory",
		"isExtraImport": true,
		"detail": "langchain.memory",
		"documentation": {}
	},
	{
		"label": "ChatMessageHistory",
		"importPath": "langchain.memory",
		"description": "langchain.memory",
		"isExtraImport": true,
		"detail": "langchain.memory",
		"documentation": {}
	},
	{
		"label": "StrOutputParser",
		"importPath": "langchain_core.output_parsers",
		"description": "langchain_core.output_parsers",
		"isExtraImport": true,
		"detail": "langchain_core.output_parsers",
		"documentation": {}
	},
	{
		"label": "JsonOutputParser",
		"importPath": "langchain_core.output_parsers",
		"description": "langchain_core.output_parsers",
		"isExtraImport": true,
		"detail": "langchain_core.output_parsers",
		"documentation": {}
	},
	{
		"label": "JsonOutputToolsParser",
		"importPath": "langchain.output_parsers",
		"description": "langchain.output_parsers",
		"isExtraImport": true,
		"detail": "langchain.output_parsers",
		"documentation": {}
	},
	{
		"label": "ChatPromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "PromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "MessagesPlaceholder",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "SystemMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "AIMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "HumanMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "ChatPromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "PromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "MessagesPlaceholder",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "SystemMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "AIMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "HumanMessagePromptTemplate",
		"importPath": "langchain_core.prompts",
		"description": "langchain_core.prompts",
		"isExtraImport": true,
		"detail": "langchain_core.prompts",
		"documentation": {}
	},
	{
		"label": "SystemMessage",
		"importPath": "langchain_core.messages",
		"description": "langchain_core.messages",
		"isExtraImport": true,
		"detail": "langchain_core.messages",
		"documentation": {}
	},
	{
		"label": "AIMessage",
		"importPath": "langchain_core.messages",
		"description": "langchain_core.messages",
		"isExtraImport": true,
		"detail": "langchain_core.messages",
		"documentation": {}
	},
	{
		"label": "HumanMessage",
		"importPath": "langchain_core.messages",
		"description": "langchain_core.messages",
		"isExtraImport": true,
		"detail": "langchain_core.messages",
		"documentation": {}
	},
	{
		"label": "hub",
		"importPath": "langchain",
		"description": "langchain",
		"isExtraImport": true,
		"detail": "langchain",
		"documentation": {}
	},
	{
		"label": "SelfQueryRetriever",
		"importPath": "langchain.retrievers.self_query.base",
		"description": "langchain.retrievers.self_query.base",
		"isExtraImport": true,
		"detail": "langchain.retrievers.self_query.base",
		"documentation": {}
	},
	{
		"label": "MultiQueryRetriever",
		"importPath": "langchain.retrievers.multi_query",
		"description": "langchain.retrievers.multi_query",
		"isExtraImport": true,
		"detail": "langchain.retrievers.multi_query",
		"documentation": {}
	},
	{
		"label": "BM25Retriever",
		"importPath": "langchain.retrievers.bm25",
		"description": "langchain.retrievers.bm25",
		"isExtraImport": true,
		"detail": "langchain.retrievers.bm25",
		"documentation": {}
	},
	{
		"label": "LLMChainExtractor",
		"importPath": "langchain.retrievers.document_compressors",
		"description": "langchain.retrievers.document_compressors",
		"isExtraImport": true,
		"detail": "langchain.retrievers.document_compressors",
		"documentation": {}
	},
	{
		"label": "LLMChainFilter",
		"importPath": "langchain.retrievers.document_compressors",
		"description": "langchain.retrievers.document_compressors",
		"isExtraImport": true,
		"detail": "langchain.retrievers.document_compressors",
		"documentation": {}
	},
	{
		"label": "EmbeddingsFilter",
		"importPath": "langchain.retrievers.document_compressors",
		"description": "langchain.retrievers.document_compressors",
		"isExtraImport": true,
		"detail": "langchain.retrievers.document_compressors",
		"documentation": {}
	},
	{
		"label": "DocumentCompressorPipeline",
		"importPath": "langchain.retrievers.document_compressors",
		"description": "langchain.retrievers.document_compressors",
		"isExtraImport": true,
		"detail": "langchain.retrievers.document_compressors",
		"documentation": {}
	},
	{
		"label": "EmbeddingsRedundantFilter",
		"importPath": "langchain_community.document_transformers.embeddings_redundant_filter",
		"description": "langchain_community.document_transformers.embeddings_redundant_filter",
		"isExtraImport": true,
		"detail": "langchain_community.document_transformers.embeddings_redundant_filter",
		"documentation": {}
	},
	{
		"label": "logging",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "logging",
		"description": "logging",
		"detail": "logging",
		"documentation": {}
	},
	{
		"label": "HubRunnable",
		"importPath": "langchain.runnables.hub",
		"description": "langchain.runnables.hub",
		"isExtraImport": true,
		"detail": "langchain.runnables.hub",
		"documentation": {}
	},
	{
		"label": "RunnableWithMessageHistory",
		"importPath": "langchain_core.runnables.history",
		"description": "langchain_core.runnables.history",
		"isExtraImport": true,
		"detail": "langchain_core.runnables.history",
		"documentation": {}
	},
	{
		"label": "RunnableMap",
		"importPath": "langchain.schema.runnable",
		"description": "langchain.schema.runnable",
		"isExtraImport": true,
		"detail": "langchain.schema.runnable",
		"documentation": {}
	},
	{
		"label": "CharacterTextSplitter",
		"importPath": "langchain.text_splitter",
		"description": "langchain.text_splitter",
		"isExtraImport": true,
		"detail": "langchain.text_splitter",
		"documentation": {}
	},
	{
		"label": "TextSplitter",
		"importPath": "langchain.text_splitter",
		"description": "langchain.text_splitter",
		"isExtraImport": true,
		"detail": "langchain.text_splitter",
		"documentation": {}
	},
	{
		"label": "RecursiveCharacterTextSplitter",
		"importPath": "langchain.text_splitter",
		"description": "langchain.text_splitter",
		"isExtraImport": true,
		"detail": "langchain.text_splitter",
		"documentation": {}
	},
	{
		"label": "csv",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "csv",
		"description": "csv",
		"detail": "csv",
		"documentation": {}
	},
	{
		"label": "Settings",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "Document",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "get_response_synthesizer",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "SimpleDirectoryReader",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "StorageContext",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "load_index_from_storage",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "VectorStoreIndex",
		"importPath": "llama_index.core",
		"description": "llama_index.core",
		"isExtraImport": true,
		"detail": "llama_index.core",
		"documentation": {}
	},
	{
		"label": "OpenAIEmbedding",
		"importPath": "llama_index.embeddings.openai",
		"description": "llama_index.embeddings.openai",
		"isExtraImport": true,
		"detail": "llama_index.embeddings.openai",
		"documentation": {}
	},
	{
		"label": "IngestionPipeline",
		"importPath": "llama_index.core.ingestion",
		"description": "llama_index.core.ingestion",
		"isExtraImport": true,
		"detail": "llama_index.core.ingestion",
		"documentation": {}
	},
	{
		"label": "OpenAI",
		"importPath": "llama_index.llms.openai",
		"description": "llama_index.llms.openai",
		"isExtraImport": true,
		"detail": "llama_index.llms.openai",
		"documentation": {}
	},
	{
		"label": "SentenceSplitter",
		"importPath": "llama_index.core.node_parser",
		"description": "llama_index.core.node_parser",
		"isExtraImport": true,
		"detail": "llama_index.core.node_parser",
		"documentation": {}
	},
	{
		"label": "TokenTextSplitter",
		"importPath": "llama_index.core.node_parser",
		"description": "llama_index.core.node_parser",
		"isExtraImport": true,
		"detail": "llama_index.core.node_parser",
		"documentation": {}
	},
	{
		"label": "SimilarityPostprocessor",
		"importPath": "llama_index.core.postprocessor",
		"description": "llama_index.core.postprocessor",
		"isExtraImport": true,
		"detail": "llama_index.core.postprocessor",
		"documentation": {}
	},
	{
		"label": "RetrieverQueryEngine",
		"importPath": "llama_index.core.query_engine",
		"description": "llama_index.core.query_engine",
		"isExtraImport": true,
		"detail": "llama_index.core.query_engine",
		"documentation": {}
	},
	{
		"label": "CSVReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "PagedCSVReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "PandasCSVReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "DocxReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "FlatReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "HTMLTagReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "IPYNBReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "MarkdownReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "PDFReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "PyMuPDFReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "UnstructuredReader",
		"importPath": "llama_index.readers.file",
		"description": "llama_index.readers.file",
		"isExtraImport": true,
		"detail": "llama_index.readers.file",
		"documentation": {}
	},
	{
		"label": "TxtaiReader",
		"importPath": "llama_index.readers.txtai",
		"description": "llama_index.readers.txtai",
		"isExtraImport": true,
		"detail": "llama_index.readers.txtai",
		"documentation": {}
	},
	{
		"label": "VectorIndexRetriever",
		"importPath": "llama_index.core.retrievers",
		"description": "llama_index.core.retrievers",
		"isExtraImport": true,
		"detail": "llama_index.core.retrievers",
		"documentation": {}
	},
	{
		"label": "TextNode",
		"importPath": "llama_index.core.schema",
		"description": "llama_index.core.schema",
		"isExtraImport": true,
		"detail": "llama_index.core.schema",
		"documentation": {}
	},
	{
		"label": "chromadb",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "chromadb",
		"description": "chromadb",
		"detail": "chromadb",
		"documentation": {}
	},
	{
		"label": "QdrantVectorStore",
		"importPath": "llama_index.vector_stores.qdrant",
		"description": "llama_index.vector_stores.qdrant",
		"isExtraImport": true,
		"detail": "llama_index.vector_stores.qdrant",
		"documentation": {}
	},
	{
		"label": "ChromaVectorStore",
		"importPath": "llama_index.vector_stores.chroma",
		"description": "llama_index.vector_stores.chroma",
		"isExtraImport": true,
		"detail": "llama_index.vector_stores.chroma",
		"documentation": {}
	},
	{
		"label": "FastAPI",
		"importPath": "fastapi",
		"description": "fastapi",
		"isExtraImport": true,
		"detail": "fastapi",
		"documentation": {}
	},
	{
		"label": "FastAPI",
		"importPath": "fastapi",
		"description": "fastapi",
		"isExtraImport": true,
		"detail": "fastapi",
		"documentation": {}
	},
	{
		"label": "RedirectResponse",
		"importPath": "fastapi.responses",
		"description": "fastapi.responses",
		"isExtraImport": true,
		"detail": "fastapi.responses",
		"documentation": {}
	},
	{
		"label": "RedirectResponse",
		"importPath": "fastapi.responses",
		"description": "fastapi.responses",
		"isExtraImport": true,
		"detail": "fastapi.responses",
		"documentation": {}
	},
	{
		"label": "add_routes",
		"importPath": "langserve",
		"description": "langserve",
		"isExtraImport": true,
		"detail": "langserve",
		"documentation": {}
	},
	{
		"label": "add_routes",
		"importPath": "langserve",
		"description": "langserve",
		"isExtraImport": true,
		"detail": "langserve",
		"documentation": {}
	},
	{
		"label": "yaml",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "yaml",
		"description": "yaml",
		"detail": "yaml",
		"documentation": {}
	},
	{
		"label": "CORSMiddleware",
		"importPath": "fastapi.middleware.cors",
		"description": "fastapi.middleware.cors",
		"isExtraImport": true,
		"detail": "fastapi.middleware.cors",
		"documentation": {}
	},
	{
		"label": "prompts_onlinica",
		"importPath": "my_prompts",
		"description": "my_prompts",
		"isExtraImport": true,
		"detail": "my_prompts",
		"documentation": {}
	},
	{
		"label": "ConversationChain",
		"importPath": "langchain.chains",
		"description": "langchain.chains",
		"isExtraImport": true,
		"detail": "langchain.chains",
		"documentation": {}
	},
	{
		"label": "chainlit",
		"kind": 6,
		"isExtraImport": true,
		"importPath": "chainlit",
		"description": "chainlit",
		"detail": "chainlit",
		"documentation": {}
	},
	{
		"label": "ThreadDict",
		"importPath": "chainlit.types",
		"description": "chainlit.types",
		"isExtraImport": true,
		"detail": "chainlit.types",
		"documentation": {}
	},
	{
		"label": "ChatbotApp",
		"kind": 6,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "class ChatbotApp:\n    def __init__(self, elem_id=None):\n        self.elem_id = elem_id or str(uuid.uuid4())\n        self.chat_history = []\n        # chat_history. stores the entire conversation history\n        # [(user_msg, bot_msg), (user_msg, bot_msg), ...]\n        self.chatbot = gr.Chatbot(\n            [],\n            elem_id=self.elem_id,\n            bubble_full_width=False,",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "vote",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def vote(data: gr.LikeData):\n    \"\"\"\n    handles user clicks on icons\n    argument contains information about the liked/disliked message\n    \"\"\"\n    if data.liked:\n        print(f\"👍 {data.value}, {data.index}, {data.liked}\")\n    else:\n        print(f\"👎 {data.value}, {data.index}, {data.liked}\")\ndef add_file(chat_history, file):",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "add_file",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def add_file(chat_history, file):\n    chat_history = chat_history + [((file.name,), None)]\n    return chat_history\ndef user(human_msg, chat_history):\n    \"\"\"\n    clear msg box, return new chat_history to bot\n    updates the chatbot, clears the input, and renders the field \n    non-interactive to prevent additional messages while the chatbot responds. \n    Instant execution is achieved by setting queue=False, bypassing any \n    potential queue. The chatbot's history appends (user_message, None), ",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "user",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def user(human_msg, chat_history):\n    \"\"\"\n    clear msg box, return new chat_history to bot\n    updates the chatbot, clears the input, and renders the field \n    non-interactive to prevent additional messages while the chatbot responds. \n    Instant execution is achieved by setting queue=False, bypassing any \n    potential queue. The chatbot's history appends (user_message, None), \n    indicating an unanswered bot response.\n    \"\"\"\n    chat_history = chat_history + [[human_msg, None]]",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "clean_human_msg",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def clean_human_msg(human_msg):\n    return gr.Textbox(value=\"\", interactive=True)\n# Function to create chat app\ndef create_chat_app(elem_id=None):\n    return ChatbotApp(elem_id)\n###############################################################################\n#######\n# BOT #\n#######\ndef bot(chat_history, human_msg, fn):",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "create_chat_app",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def create_chat_app(elem_id=None):\n    return ChatbotApp(elem_id)\n###############################################################################\n#######\n# BOT #\n#######\ndef bot(chat_history, human_msg, fn):\n    # print(chat_history)\n    # [['hello', 'How are you?'], ['hi', None]]\n    \"\"\"",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "bot",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def bot(chat_history, human_msg, fn):\n    # print(chat_history)\n    # [['hello', 'How are you?'], ['hi', None]]\n    \"\"\"\n    updates the chatbot's history. The None message is replaced with \n    the bot's response character by character. Gradio automatically converts any\n    function with the yield keyword into a streaming output interface.\n    \"\"\"\n    ai_msg = human_msg\n    chat_history[-1][1] = \"\"",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "bot_general_chat",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def bot_general_chat(chat_history, human_msg):\n    ai_msg = general_chat.get_conversation_chain_response(\n        human_msg=human_msg, conversation_chain=conversation_chain,\n    )\n    chat_history[-1][1] = \"\"\n    for character in ai_msg:\n        chat_history[-1][1] += character\n        time.sleep(0.01)\n        yield chat_history\ndef bot_onlinica(chat_history, human_msg):",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "bot_onlinica",
		"kind": 2,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "def bot_onlinica(chat_history, human_msg):\n    ai_msg = VTC.agent.invoke_agent(human_msg)\n    chat_history[-1][1] = \"\"\n    for character in ai_msg:\n        chat_history[-1][1] += character\n        time.sleep(0.01)\n        yield chat_history",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "conversation_chain",
		"kind": 5,
		"importPath": "backup.chatbot",
		"description": "backup.chatbot",
		"peekOfCode": "conversation_chain = general_chat.create_conversation_chain()\n###############################################################################\nclass ChatbotApp:\n    def __init__(self, elem_id=None):\n        self.elem_id = elem_id or str(uuid.uuid4())\n        self.chat_history = []\n        # chat_history. stores the entire conversation history\n        # [(user_msg, bot_msg), (user_msg, bot_msg), ...]\n        self.chatbot = gr.Chatbot(\n            [],",
		"detail": "backup.chatbot",
		"documentation": {}
	},
	{
		"label": "QdrantWrapper",
		"kind": 6,
		"importPath": "backup.vectorstores",
		"description": "backup.vectorstores",
		"peekOfCode": "class QdrantWrapper:\n  def __init__(\n    self,\n    qdrant_host: str,\n    qdrant_api_key: str,\n    configs: dict,\n    collection_name: str = \"\",\n    default_search_type: str = \"similarity\",  # \"mmr\"\n    default_search_kwargs: dict = {\n      \"k\": 6,",
		"detail": "backup.vectorstores",
		"documentation": {}
	},
	{
		"label": "create_qdrant_index",
		"kind": 2,
		"importPath": "backup.vectorstores",
		"description": "backup.vectorstores",
		"peekOfCode": "def create_qdrant_index(\n  docs, embeddings, use_memory=True, path=None, collection_name=\"my_documents\"\n  ):\n  \"\"\"\n  Create a Qdrant index and return the Qdrant object.\n  Parameters:\n  - docs: List of documents to index\n  - embeddings: List of corresponding document embeddings\n  - use_memory: Flag to indicate whether to use in-memory storage (default is True)\n  - path: Path for on-disk storage (if using file-based storage)",
		"detail": "backup.vectorstores",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_chainlit.add_packages",
		"description": "my_chainlit.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_chainlit.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_chainlit.add_packages",
		"description": "my_chainlit.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_chainlit.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_chainlit.add_packages",
		"description": "my_chainlit.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_chainlit.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_chainlit.add_packages",
		"description": "my_chainlit.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_chainlit.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_chainlit.add_packages",
		"description": "my_chainlit.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_chainlit.add_packages",
		"documentation": {}
	},
	{
		"label": "MODELS",
		"kind": 5,
		"importPath": "my_configs.constants",
		"description": "my_configs.constants",
		"peekOfCode": "MODELS = {\n  \"OPENAI\":\n  {\n    \"GPT-3.5-TURBO-0125\": \"gpt-3.5-turbo-0125\",\n    \"GPT-4-TURBO-PREVIEW\": \"gpt-4-turbo-preview\",\n    \"GPT-3.5-TURBO-L.INDEX\": \"gpt-3.5-turbo\",\n    \"GPT-4-L.INDEX\": \"gpt-4\",\n  },\n  \"ANTHROPIC\":\n  {",
		"detail": "my_configs.constants",
		"documentation": {}
	},
	{
		"label": "EMBEDDINGS",
		"kind": 5,
		"importPath": "my_configs.constants",
		"description": "my_configs.constants",
		"peekOfCode": "EMBEDDINGS = {\n  \"OPENAI\":\n  {\n    \"TEXT-EMBEDDING-3-LARGE\": \"text-embedding-3-large\",\n    \"TEXT-EMBEDDING-ADA-002\": \"text-embedding-ada-002\",\n  },\n  \"COHERE\":\n  {\n    \"EMBED-EMBED-ENGLISH-V3.0\": \"embed-embed-english-v3.0\",\n    \"EMBED-MULTILINGUAL-V3.0\": \"embed-multilingual-v3.0\",",
		"detail": "my_configs.constants",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_crewai.add_packages",
		"description": "my_crewai.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_crewai.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_crewai.add_packages",
		"description": "my_crewai.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_crewai.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_crewai.add_packages",
		"description": "my_crewai.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_crewai.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_crewai.add_packages",
		"description": "my_crewai.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_crewai.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_crewai.add_packages",
		"description": "my_crewai.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_crewai.add_packages",
		"documentation": {}
	},
	{
		"label": "AgentsYoutube",
		"kind": 6,
		"importPath": "my_crewai.agents",
		"description": "my_crewai.agents",
		"peekOfCode": "class AgentsYoutube:\n    pass",
		"detail": "my_crewai.agents",
		"documentation": {}
	},
	{
		"label": "TasksYoutube",
		"kind": 6,
		"importPath": "my_crewai.tasks",
		"description": "my_crewai.tasks",
		"peekOfCode": "class TasksYoutube:\n  pass",
		"detail": "my_crewai.tasks",
		"documentation": {}
	},
	{
		"label": "ToolsBrowser",
		"kind": 6,
		"importPath": "my_crewai.tools",
		"description": "my_crewai.tools",
		"peekOfCode": "class ToolsBrowser():\n  @tool(\"Scrape website content\")\n  def scrape_and_summarize_website(url: str) -> str:\n    \"\"\"Useful to scrape and summarize a website content\"\"\"\n    doc = document_loaders.WebBaseLoader(url).load()[0].page_content\n    doc = process_scraped_content(doc)\n    doc = [documents.Document(doc)]\n    text_splitter = text_splitters.RecursiveCharacterTextSplitter(\n      chunk_size=2000, chunk_overlap=300,\n    )",
		"detail": "my_crewai.tools",
		"documentation": {}
	},
	{
		"label": "ToolsCalculator",
		"kind": 6,
		"importPath": "my_crewai.tools",
		"description": "my_crewai.tools",
		"peekOfCode": "class ToolsCalculator():\n  @tool(\"Make a calculation\")\n  def calculate(operation: str):\n    \"\"\"\\\n    Useful to perform any mathematical calculations, like sum, minus, multiplication, \\\n    division, etc. \n    Parameters:\n    - operation: str\n    The input to this tool should be mathematical expression, examples:\n    - `1 + 2`",
		"detail": "my_crewai.tools",
		"documentation": {}
	},
	{
		"label": "ToolsContent",
		"kind": 6,
		"importPath": "my_crewai.tools",
		"description": "my_crewai.tools",
		"peekOfCode": "class ToolsContent:\n  @tool(\"Read webpage content\")\n  def read_content(url: str) -> str:\n    \"\"\"\n    Read content from a webpage.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    text_content = soup.get_text()\n    return text_content[:5000]",
		"detail": "my_crewai.tools",
		"documentation": {}
	},
	{
		"label": "process_scraped_content",
		"kind": 2,
		"importPath": "my_crewai.tools",
		"description": "my_crewai.tools",
		"peekOfCode": "def process_scraped_content(text: str) -> str:\n  # Replace \"\\n \" with \"\\n\"\n  text = re.sub(r'\\n\\s*', '\\n', text)\n  # Replace consecutive newlines with a single newline\n  text = re.sub(r'\\n+', '\\n', text)\n  # Replace multiple spaces with a single space\n  text = re.sub(r' +', ' ', text)\n  # Split text into lines\n  lines = text.split('\\n')\n  # Filter out lines with fewer than 4 words",
		"detail": "my_crewai.tools",
		"documentation": {}
	},
	{
		"label": "tools_human",
		"kind": 5,
		"importPath": "my_crewai.tools",
		"description": "my_crewai.tools",
		"peekOfCode": "tools_human = agent_tools.tools_human",
		"detail": "my_crewai.tools",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_gradio.add_packages",
		"description": "my_gradio.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_gradio.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_gradio.add_packages",
		"description": "my_gradio.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_gradio.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_gradio.add_packages",
		"description": "my_gradio.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_gradio.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_gradio.add_packages",
		"description": "my_gradio.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_gradio.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_gradio.add_packages",
		"description": "my_gradio.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_gradio.add_packages",
		"documentation": {}
	},
	{
		"label": "ChatbotApp",
		"kind": 6,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "class ChatbotApp:\n    def __init__(self, elem_id=None):\n        self.elem_id = elem_id or str(uuid.uuid4())\n        self.chat_history = []\n        # chat_history. stores the entire conversation history\n        # [(user_msg, bot_msg), (user_msg, bot_msg), ...]\n        self.chatbot = gr.Chatbot(\n            [],\n            elem_id=self.elem_id,\n            bubble_full_width=False,",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "vote",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def vote(data: gr.LikeData):\n    \"\"\"\n    handles user clicks on icons\n    argument contains information about the liked/disliked message\n    \"\"\"\n    if data.liked:\n        print(f\"👍 {data.value}, {data.index}, {data.liked}\")\n    else:\n        print(f\"👎 {data.value}, {data.index}, {data.liked}\")\ndef add_file(chat_history, file):",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "add_file",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def add_file(chat_history, file):\n    chat_history = chat_history + [((file.name,), None)]\n    return chat_history\ndef user(human_msg, chat_history):\n    \"\"\"\n    clear msg box, return new chat_history to bot\n    updates the chatbot, clears the input, and renders the field \n    non-interactive to prevent additional messages while the chatbot responds. \n    Instant execution is achieved by setting queue=False, bypassing any \n    potential queue. The chatbot's history appends (user_message, None), ",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "user",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def user(human_msg, chat_history):\n    \"\"\"\n    clear msg box, return new chat_history to bot\n    updates the chatbot, clears the input, and renders the field \n    non-interactive to prevent additional messages while the chatbot responds. \n    Instant execution is achieved by setting queue=False, bypassing any \n    potential queue. The chatbot's history appends (user_message, None), \n    indicating an unanswered bot response.\n    \"\"\"\n    chat_history = chat_history + [[human_msg, None]]",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "clean_human_msg",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def clean_human_msg(human_msg):\n    return gr.Textbox(value=\"\", interactive=True)\n# Function to create chat app\ndef create_chat_app(elem_id=None):\n    return ChatbotApp(elem_id)\n###############################################################################\n#######\n# BOT #\n#######\ndef bot(chat_history, human_msg, fn):",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "create_chat_app",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def create_chat_app(elem_id=None):\n    return ChatbotApp(elem_id)\n###############################################################################\n#######\n# BOT #\n#######\ndef bot(chat_history, human_msg, fn):\n    # print(chat_history)\n    # [['hello', 'How are you?'], ['hi', None]]\n    \"\"\"",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "bot",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def bot(chat_history, human_msg, fn):\n    # print(chat_history)\n    # [['hello', 'How are you?'], ['hi', None]]\n    \"\"\"\n    updates the chatbot's history. The None message is replaced with \n    the bot's response character by character. Gradio automatically converts any\n    function with the yield keyword into a streaming output interface.\n    \"\"\"\n    ai_msg = human_msg\n    chat_history[-1][1] = \"\"",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "bot_general_chat",
		"kind": 2,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "def bot_general_chat(chat_history, human_msg):\n    ai_msg = general_chat.get_conversation_chain_response(\n        human_msg=human_msg, conversation_chain=conversation_chain,\n    )\n    chat_history[-1][1] = \"\"\n    for character in ai_msg:\n        chat_history[-1][1] += character\n        time.sleep(0.01)\n        yield chat_history\nasync def bot_onlinica(chat_history, human_msg):",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "conversation_chain",
		"kind": 5,
		"importPath": "my_gradio.chatbot",
		"description": "my_gradio.chatbot",
		"peekOfCode": "conversation_chain = general_chat.create_conversation_chain()\n###############################################################################\nclass ChatbotApp:\n    def __init__(self, elem_id=None):\n        self.elem_id = elem_id or str(uuid.uuid4())\n        self.chat_history = []\n        # chat_history. stores the entire conversation history\n        # [(user_msg, bot_msg), (user_msg, bot_msg), ...]\n        self.chatbot = gr.Chatbot(\n            [],",
		"detail": "my_gradio.chatbot",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_langchain.add_packages",
		"description": "my_langchain.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_langchain.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_langchain.add_packages",
		"description": "my_langchain.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_langchain.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_langchain.add_packages",
		"description": "my_langchain.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_langchain.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_langchain.add_packages",
		"description": "my_langchain.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_langchain.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_langchain.add_packages",
		"description": "my_langchain.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_langchain.add_packages",
		"documentation": {}
	},
	{
		"label": "wikipedia_api_wrapper",
		"kind": 5,
		"importPath": "my_langchain.agent_tools",
		"description": "my_langchain.agent_tools",
		"peekOfCode": "wikipedia_api_wrapper = WikipediaAPIWrapper(top_k_results=1, \n                                            doc_content_chars_max=100)\nwikipedia = WikipediaQueryRun(api_wrapper=wikipedia_api_wrapper)\ndef _handle_error(error: ToolException) -> str:\n  return (\n    \"The following errors occurred during tool execution:\"\n    + error.args[0]\n    + \"Please try another tool.\"\n  )\ntools_human = load_tools([\"human\"])",
		"detail": "my_langchain.agent_tools",
		"documentation": {}
	},
	{
		"label": "wikipedia",
		"kind": 5,
		"importPath": "my_langchain.agent_tools",
		"description": "my_langchain.agent_tools",
		"peekOfCode": "wikipedia = WikipediaQueryRun(api_wrapper=wikipedia_api_wrapper)\ndef _handle_error(error: ToolException) -> str:\n  return (\n    \"The following errors occurred during tool execution:\"\n    + error.args[0]\n    + \"Please try another tool.\"\n  )\ntools_human = load_tools([\"human\"])",
		"detail": "my_langchain.agent_tools",
		"documentation": {}
	},
	{
		"label": "tools_human",
		"kind": 5,
		"importPath": "my_langchain.agent_tools",
		"description": "my_langchain.agent_tools",
		"peekOfCode": "tools_human = load_tools([\"human\"])",
		"detail": "my_langchain.agent_tools",
		"documentation": {}
	},
	{
		"label": "MyAgent",
		"kind": 6,
		"importPath": "my_langchain.agents",
		"description": "my_langchain.agents",
		"peekOfCode": "class MyAgent:\n    def __init__(self, \n                 prompt: Union[BaseChatPromptTemplate, None],\n                 tools: list[BaseTool],\n                 agent_type: str, \n                 llm: Union[BaseChatModel, None],\n                ):\n        self.prompt = prompt\n        self.tools = tools\n        self.agent_type = agent_type",
		"detail": "my_langchain.agents",
		"documentation": {}
	},
	{
		"label": "invoke_agent_executor",
		"kind": 2,
		"importPath": "my_langchain.agents",
		"description": "my_langchain.agents",
		"peekOfCode": "def invoke_agent_executor(agent_executor: AgentExecutor, input_str):\n    return agent_executor.invoke({\n        \"input\": input_str\n    })[\"output\"]\n#*----------------------------------------------------------------------------\nclass MyAgent:\n    def __init__(self, \n                 prompt: Union[BaseChatPromptTemplate, None],\n                 tools: list[BaseTool],\n                 agent_type: str, ",
		"detail": "my_langchain.agents",
		"documentation": {}
	},
	{
		"label": "parse_retriever_input",
		"kind": 2,
		"importPath": "my_langchain.chains",
		"description": "my_langchain.chains",
		"peekOfCode": "def parse_retriever_input(params: typing.Dict):\n    return params[\"messages\"][-1].content\n#*------------------------------------------------------------------------------\nasync def invoke_chain(chain: Runnable, input, is_async: bool = False):\n  if is_async:\n    await chain.ainvoke(input)\n  chain.invoke(input)",
		"detail": "my_langchain.chains",
		"documentation": {}
	},
	{
		"label": "create_chat_model",
		"kind": 2,
		"importPath": "my_langchain.chat_models",
		"description": "my_langchain.chat_models",
		"peekOfCode": "def create_chat_model(config: dict) -> BaseChatModel:\n  model_option = config[\"model\"][\"option\"]\n  model_version = config['model'][model_option]\n  temperature = config[\"model\"][\"temperature\"]\n  logger.info(f\"Model: {model_option}, {model_version}\")\n  if model_option == 'openai':\n      if model_version:\n          return ChatOpenAI(\n              temperature=temperature, model=model_version, streaming=True,\n          )",
		"detail": "my_langchain.chat_models",
		"documentation": {}
	},
	{
		"label": "chat_openai",
		"kind": 5,
		"importPath": "my_langchain.chat_models",
		"description": "my_langchain.chat_models",
		"peekOfCode": "chat_openai = ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0125\")\nchat_anthropic = ChatAnthropic(\n  temperature=0, model_name=\"claude-3-haiku-20240307\"\n)\nchat_groq_mixtral = ChatGroq(\n  temperature=0, model_name=\"mixtral-8x7b-32768\",\n)\ndef create_chat_model(config: dict) -> BaseChatModel:\n  model_option = config[\"model\"][\"option\"]\n  model_version = config['model'][model_option]",
		"detail": "my_langchain.chat_models",
		"documentation": {}
	},
	{
		"label": "chat_anthropic",
		"kind": 5,
		"importPath": "my_langchain.chat_models",
		"description": "my_langchain.chat_models",
		"peekOfCode": "chat_anthropic = ChatAnthropic(\n  temperature=0, model_name=\"claude-3-haiku-20240307\"\n)\nchat_groq_mixtral = ChatGroq(\n  temperature=0, model_name=\"mixtral-8x7b-32768\",\n)\ndef create_chat_model(config: dict) -> BaseChatModel:\n  model_option = config[\"model\"][\"option\"]\n  model_version = config['model'][model_option]\n  temperature = config[\"model\"][\"temperature\"]",
		"detail": "my_langchain.chat_models",
		"documentation": {}
	},
	{
		"label": "chat_groq_mixtral",
		"kind": 5,
		"importPath": "my_langchain.chat_models",
		"description": "my_langchain.chat_models",
		"peekOfCode": "chat_groq_mixtral = ChatGroq(\n  temperature=0, model_name=\"mixtral-8x7b-32768\",\n)\ndef create_chat_model(config: dict) -> BaseChatModel:\n  model_option = config[\"model\"][\"option\"]\n  model_version = config['model'][model_option]\n  temperature = config[\"model\"][\"temperature\"]\n  logger.info(f\"Model: {model_option}, {model_version}\")\n  if model_option == 'openai':\n      if model_version:",
		"detail": "my_langchain.chat_models",
		"documentation": {}
	},
	{
		"label": "llm_openai",
		"kind": 5,
		"importPath": "my_langchain.llms",
		"description": "my_langchain.llms",
		"peekOfCode": "llm_openai = OpenAI(model=\"gpt-3.5-turbo-instruct\")",
		"detail": "my_langchain.llms",
		"documentation": {}
	},
	{
		"label": "create_prompt_tool_calling_agent",
		"kind": 2,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "def create_prompt_tool_calling_agent(\n    system_message: str = \"You are a helpful assistant\"\n):\n    prompt_custom_agent_openai_tools = ChatPromptTemplate.from_messages(\n        [\n            (\"system\", system_message),\n            MessagesPlaceholder(\"chat_history\"),\n            (\"human\", \"{input}\"),\n            MessagesPlaceholder(\"agent_scratchpad\"),\n        ]",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "create_prompt_custom_agent_xml_tools",
		"kind": 2,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "def create_prompt_custom_agent_xml_tools(\n    system_message: str = \"You are a helpful assistant. Help the user answer any questions.\"\n):\n    prompt_custom_agent_xml_tools = ChatPromptTemplate(\n        input_variables=['agent_scratchpad', 'input', 'tools'],\n        partial_variables={'chat_history': ''},\n        messages=[\n            HumanMessagePromptTemplate(\n                prompt=PromptTemplate(\n                    input_variables=['agent_scratchpad',",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "prompt_template",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "prompt_template = PromptTemplate\n# *-----------------------------------------------------------------------------\ngeneral_template = \"\"\"\\\nThe following is a friendly conversation between a human and an AI. \\\nThe AI is talkative and provides lots of specific details from its context. \\\nIf the AI does not know the answer to a question, it truthfully say it does not \\\nknow.\nCurrent conversation:\n{history}\nHuman: {input}",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "general_template",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "general_template = \"\"\"\\\nThe following is a friendly conversation between a human and an AI. \\\nThe AI is talkative and provides lots of specific details from its context. \\\nIf the AI does not know the answer to a question, it truthfully say it does not \\\nknow.\nCurrent conversation:\n{history}\nHuman: {input}\nAI Assistant:\"\"\"\ngeneral_prompt = prompt_template(",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "general_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "general_prompt = prompt_template(\n    input_variables=[\"history\", \"input\"], template=general_template,\n)\n# *-----------------------------------------------------------------------------\n#######\n# RAG #\n#######\nrag_template = \"\"\"\\\nYou are an assistant for question-answering tasks. Use the following pieces of \\\nretrieved context to answer the question at the end. If you don't know the \\",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "rag_template",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "rag_template = \"\"\"\\\nYou are an assistant for question-answering tasks. Use the following pieces of \\\nretrieved context to answer the question at the end. If you don't know the \\\nanswer, just say that you don't know, don't try to make up an answer. Use \\\nthree sentences maximum and keep the answer as concise as possible.\nContext: {context} \nQuestion: {question} \nHelpful Answer:\\\n\"\"\"\nrag_prompt = ChatPromptTemplate.from_template(rag_template)",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "rag_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "rag_prompt = ChatPromptTemplate.from_template(rag_template)\n# *---\ncontextualize_q_system_prompt = \"\"\"\\\nGiven a chat history and the lastest user question which might reference context \\\nin the chat history, formulate a standalone question which can be understood \\\nwithout the chat history. Do NOT answer the question, just reformulate it if \\\nneeded and otherwise return as is.\\\n\"\"\"\ncontextualize_q_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", contextualize_q_system_prompt),",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "contextualize_q_system_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "contextualize_q_system_prompt = \"\"\"\\\nGiven a chat history and the lastest user question which might reference context \\\nin the chat history, formulate a standalone question which can be understood \\\nwithout the chat history. Do NOT answer the question, just reformulate it if \\\nneeded and otherwise return as is.\\\n\"\"\"\ncontextualize_q_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", contextualize_q_system_prompt),\n    MessagesPlaceholder(variable_name=\"chat_history\"),\n    (\"human\", \"{question}\"),",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "contextualize_q_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "contextualize_q_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", contextualize_q_system_prompt),\n    MessagesPlaceholder(variable_name=\"chat_history\"),\n    (\"human\", \"{question}\"),\n])\nqa_system_prompt = \"\"\"\\\nYou are an assistant for question-answering tasks. Use the following pieces of \\\nretrieved context to answer the question at the end. If you don't know the \\\nanswer, just say that you don't know, don't try to make up an answer. Use \\\nthree sentences maximum and keep the answer as concise as possible.",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "qa_system_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "qa_system_prompt = \"\"\"\\\nYou are an assistant for question-answering tasks. Use the following pieces of \\\nretrieved context to answer the question at the end. If you don't know the \\\nanswer, just say that you don't know, don't try to make up an answer. Use \\\nthree sentences maximum and keep the answer as concise as possible.\n{context}\n\"\"\"\nqa_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", qa_system_prompt),\n    MessagesPlaceholder(variable_name=\"chat_history\"),",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "qa_prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "qa_prompt = ChatPromptTemplate.from_messages([\n    (\"system\", qa_system_prompt),\n    MessagesPlaceholder(variable_name=\"chat_history\"),\n    (\"human\", \"{question}\"),\n])\n# *-----------------------------------------------------------------------------\n#########\n# AGENT #\n#########\n# prompt = hub.pull(\"hwchase17/openai-tools-agent\")",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "prompt",
		"kind": 5,
		"importPath": "my_langchain.prompts",
		"description": "my_langchain.prompts",
		"peekOfCode": "prompt = create_prompt_custom_agent_xml_tools()\nprompt",
		"detail": "my_langchain.prompts",
		"documentation": {}
	},
	{
		"label": "CustomOpenAIEmbeddings",
		"kind": 6,
		"importPath": "my_langchain.text_embedding_models",
		"description": "my_langchain.text_embedding_models",
		"peekOfCode": "class CustomOpenAIEmbeddings(OpenAIEmbeddings):\n  def __init__(\n    self,\n    model: str = \"text-embedding-ada-002\",\n    *args, **kwargs\n  ):\n    openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n    super().__init__(openai_api_key=openai_api_key, *args, **kwargs)\n  def _embed_documents(self, texts):\n    embeddings = [",
		"detail": "my_langchain.text_embedding_models",
		"documentation": {}
	},
	{
		"label": "print_documents",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def print_documents(docs, is_pprint=True):\n    for doc in docs:\n        if is_pprint:\n            pprint(doc.page_content)\n        else:\n            print(doc.page_content)\ndef print_docs_with_metadata_and_score(docs):\n    for doc, score in docs:\n        content = getattr(doc, \"page_content\", None)\n        metadata = getattr(doc, \"metadata\", None)",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "print_docs_with_metadata_and_score",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def print_docs_with_metadata_and_score(docs):\n    for doc, score in docs:\n        content = getattr(doc, \"page_content\", None)\n        metadata = getattr(doc, \"metadata\", None)\n        print(f\"Content:\\n{content}\")\n        if metadata:\n            print(f\"Metadata:\\n{metadata}\")\n        if score is not None:\n            print(f\"Score:\\n{score}\")\n        print('-'*80)",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "format_docs",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def format_docs(docs: list[Document]):\n    return \"\\n\\n\".join(doc.page_content for doc in docs)\ndef update_metadata(docs: list[Document], metadatas: dict):\n    for k, v in metadatas.items():\n        for doc in docs:\n            doc.metadata[k] = v\ndef remove_metadata(docs: list[Document], key_to_remove: str):\n    for doc in docs:\n        # Check if the key exists in the metadata\n        if key_to_remove in doc.metadata:",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "update_metadata",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def update_metadata(docs: list[Document], metadatas: dict):\n    for k, v in metadatas.items():\n        for doc in docs:\n            doc.metadata[k] = v\ndef remove_metadata(docs: list[Document], key_to_remove: str):\n    for doc in docs:\n        # Check if the key exists in the metadata\n        if key_to_remove in doc.metadata:\n            # Remove the specified key from metadata\n            del doc.metadata[key_to_remove]",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "remove_metadata",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def remove_metadata(docs: list[Document], key_to_remove: str):\n    for doc in docs:\n        # Check if the key exists in the metadata\n        if key_to_remove in doc.metadata:\n            # Remove the specified key from metadata\n            del doc.metadata[key_to_remove]\ndef get_csv_column_names(file_path):\n    with open(file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        # Assuming the first row contains the column names",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "get_csv_column_names",
		"kind": 2,
		"importPath": "my_langchain.utils",
		"description": "my_langchain.utils",
		"peekOfCode": "def get_csv_column_names(file_path):\n    with open(file_path, 'r', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        # Assuming the first row contains the column names\n        column_names = next(reader, None)\n    # Remove leading spaces from column names\n    if column_names:\n        column_names = [name.strip() for name in column_names]\n    return column_names",
		"detail": "my_langchain.utils",
		"documentation": {}
	},
	{
		"label": "QdrantWrapper",
		"kind": 6,
		"importPath": "my_langchain.vectorstores",
		"description": "my_langchain.vectorstores",
		"peekOfCode": "class QdrantWrapper:\n  def __init__(\n    self,\n    qdrant_host: str,\n    qdrant_api_key: str,\n    configs: dict,\n    collection_name: str = \"\",\n    default_search_type: str = \"similarity\",  # \"mmr\"\n    default_search_kwargs: dict = {\n      \"k\": 6,",
		"detail": "my_langchain.vectorstores",
		"documentation": {}
	},
	{
		"label": "create_qdrant_index",
		"kind": 2,
		"importPath": "my_langchain.vectorstores",
		"description": "my_langchain.vectorstores",
		"peekOfCode": "def create_qdrant_index(\n  docs, embeddings, use_memory=True, path=None, collection_name=\"my_documents\"\n  ):\n  \"\"\"\n  Create a Qdrant index and return the Qdrant object.\n  Parameters:\n  - docs: List of documents to index\n  - embeddings: List of corresponding document embeddings\n  - use_memory: Flag to indicate whether to use in-memory storage (default is True)\n  - path: Path for on-disk storage (if using file-based storage)",
		"detail": "my_langchain.vectorstores",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_llamaindex.add_packages",
		"description": "my_llamaindex.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_llamaindex.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_llamaindex.add_packages",
		"description": "my_llamaindex.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_llamaindex.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_llamaindex.add_packages",
		"description": "my_llamaindex.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_llamaindex.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_llamaindex.add_packages",
		"description": "my_llamaindex.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_llamaindex.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_llamaindex.add_packages",
		"description": "my_llamaindex.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_llamaindex.add_packages",
		"documentation": {}
	},
	{
		"label": "openai_embeddings",
		"kind": 5,
		"importPath": "my_llamaindex.embeddings",
		"description": "my_llamaindex.embeddings",
		"peekOfCode": "openai_embeddings = {\n  \"TEXT_EMBED_ADA_002\": OpenAIEmbedding(model=\"text-embedding-ada-002\"),\n  \"TEXT_EMBED_3_LARGE\": OpenAIEmbedding(model=\"text-embedding-3-large\"),\n}",
		"detail": "my_llamaindex.embeddings",
		"documentation": {}
	},
	{
		"label": "openai_llms",
		"kind": 5,
		"importPath": "my_llamaindex.llms",
		"description": "my_llamaindex.llms",
		"peekOfCode": "openai_llms = {\n  \"GPT-3.5-TURBO\": OpenAI(\n    model=\"gpt-3.5-turbo\", temperature=0.0, request_timeout=60.0,\n  ),\n  \"GPT-4\": OpenAI(\n    model=\"gpt-4\", temperature=0.0, request_timeout=60.0,\n  ),\n}",
		"detail": "my_llamaindex.llms",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "my_prompts.add_packages",
		"description": "my_prompts.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "my_prompts.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "my_prompts.add_packages",
		"description": "my_prompts.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "my_prompts.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "my_prompts.add_packages",
		"description": "my_prompts.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_prompts.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "my_prompts.add_packages",
		"description": "my_prompts.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_prompts.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "my_prompts.add_packages",
		"description": "my_prompts.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "my_prompts.add_packages",
		"documentation": {}
	},
	{
		"label": "system_message_onlinica",
		"kind": 5,
		"importPath": "my_prompts.prompts_onlinica",
		"description": "my_prompts.prompts_onlinica",
		"peekOfCode": "system_message_onlinica = \"\"\"\\\nYou are a consultant for an online learning platform called Onlinica. Link: https://onlinica.com/\nYou have the following qualities:\n- Helpful\n- Extremely dedicated and hardworking\n- Professionalism, respect, sincerity and honesty\n- Standard thinking\n- Excellent communication, negotiation and complaint handling skills\n- Excellent sales skills\n- Deep understanding of products/services. Strong knowledge of the industry",
		"detail": "my_prompts.prompts_onlinica",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.CrewAI.add_packages",
		"description": "use_cases.CrewAI.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.CrewAI.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.CrewAI.add_packages",
		"description": "use_cases.CrewAI.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.CrewAI.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.CrewAI.add_packages",
		"description": "use_cases.CrewAI.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.CrewAI.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.CrewAI.add_packages",
		"description": "use_cases.CrewAI.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.CrewAI.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.CrewAI.add_packages",
		"description": "use_cases.CrewAI.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.CrewAI.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangChain.Integrations.add_packages",
		"description": "use_cases.LangChain.Integrations.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangChain.Integrations.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangChain.Integrations.add_packages",
		"description": "use_cases.LangChain.Integrations.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangChain.Integrations.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangChain.Integrations.add_packages",
		"description": "use_cases.LangChain.Integrations.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Integrations.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangChain.Integrations.add_packages",
		"description": "use_cases.LangChain.Integrations.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Integrations.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangChain.Integrations.add_packages",
		"description": "use_cases.LangChain.Integrations.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Integrations.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangChain.Use_Cases.add_packages",
		"description": "use_cases.LangChain.Use_Cases.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangChain.Use_Cases.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangChain.Use_Cases.add_packages",
		"description": "use_cases.LangChain.Use_Cases.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangChain.Use_Cases.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangChain.Use_Cases.add_packages",
		"description": "use_cases.LangChain.Use_Cases.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Use_Cases.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangChain.Use_Cases.add_packages",
		"description": "use_cases.LangChain.Use_Cases.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Use_Cases.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangChain.Use_Cases.add_packages",
		"description": "use_cases.LangChain.Use_Cases.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.Use_Cases.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangChain.vectorstores.add_packages",
		"description": "use_cases.LangChain.vectorstores.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangChain.vectorstores.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangChain.vectorstores.add_packages",
		"description": "use_cases.LangChain.vectorstores.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangChain.vectorstores.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangChain.vectorstores.add_packages",
		"description": "use_cases.LangChain.vectorstores.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.vectorstores.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangChain.vectorstores.add_packages",
		"description": "use_cases.LangChain.vectorstores.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.vectorstores.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangChain.vectorstores.add_packages",
		"description": "use_cases.LangChain.vectorstores.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.vectorstores.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangChain.add_packages",
		"description": "use_cases.LangChain.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangChain.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangChain.add_packages",
		"description": "use_cases.LangChain.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangChain.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangChain.add_packages",
		"description": "use_cases.LangChain.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangChain.add_packages",
		"description": "use_cases.LangChain.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangChain.add_packages",
		"description": "use_cases.LangChain.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangChain.add_packages",
		"documentation": {}
	},
	{
		"label": "app",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.app.server copy",
		"description": "use_cases.LangServe.basic.app.server copy",
		"peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def redirect_root_to_docs():\n    return RedirectResponse(\"/docs\")\n# Edit this to add the chain you want to add\nadd_routes(app, NotImplemented)\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000) # localhost, 0.0.0.0",
		"detail": "use_cases.LangServe.basic.app.server copy",
		"documentation": {}
	},
	{
		"label": "app",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.app.server",
		"description": "use_cases.LangServe.basic.app.server",
		"peekOfCode": "app = FastAPI(\n    title=\"LangChain Server\",\n    description=\"A simple API Server using LangChain's Runnable Interfaces\",\n)\n# Set CORS headers when calling endpoint from the browser using FastAPI's\n# built-in middleware.\n# Set all CORS enabled origins\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],",
		"detail": "use_cases.LangServe.basic.app.server",
		"documentation": {}
	},
	{
		"label": "prompt",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.app.server",
		"description": "use_cases.LangServe.basic.app.server",
		"peekOfCode": "prompt = prompts.ChatPromptTemplate.from_template(\n    \"tell me a joke about {topic}\"\n)\nchain = prompt | chat_models.chat_anthropic\nadd_routes(\n    app=app,\n    runnable=chain,\n    path=\"/joke\"\n)\nif __name__ == \"__main__\":",
		"detail": "use_cases.LangServe.basic.app.server",
		"documentation": {}
	},
	{
		"label": "chain",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.app.server",
		"description": "use_cases.LangServe.basic.app.server",
		"peekOfCode": "chain = prompt | chat_models.chat_anthropic\nadd_routes(\n    app=app,\n    runnable=chain,\n    path=\"/joke\"\n)\nif __name__ == \"__main__\":\n  import uvicorn\n  uvicorn.run(app, host=\"0.0.0.0\", port=config[\"port\"])",
		"detail": "use_cases.LangServe.basic.app.server",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.add_packages",
		"description": "use_cases.LangServe.basic.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangServe.basic.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.add_packages",
		"description": "use_cases.LangServe.basic.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangServe.basic.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.add_packages",
		"description": "use_cases.LangServe.basic.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.basic.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.add_packages",
		"description": "use_cases.LangServe.basic.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.basic.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangServe.basic.add_packages",
		"description": "use_cases.LangServe.basic.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.basic.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LangServe.add_packages",
		"description": "use_cases.LangServe.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LangServe.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LangServe.add_packages",
		"description": "use_cases.LangServe.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LangServe.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LangServe.add_packages",
		"description": "use_cases.LangServe.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LangServe.add_packages",
		"description": "use_cases.LangServe.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LangServe.add_packages",
		"description": "use_cases.LangServe.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LangServe.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.Docs.add_packages",
		"description": "use_cases.LlamaIndex.Docs.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LlamaIndex.Docs.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.Docs.add_packages",
		"description": "use_cases.LlamaIndex.Docs.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LlamaIndex.Docs.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.Docs.add_packages",
		"description": "use_cases.LlamaIndex.Docs.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.Docs.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.Docs.add_packages",
		"description": "use_cases.LlamaIndex.Docs.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.Docs.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.Docs.add_packages",
		"description": "use_cases.LlamaIndex.Docs.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.Docs.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.add_packages",
		"description": "use_cases.LlamaIndex.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.LlamaIndex.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.add_packages",
		"description": "use_cases.LlamaIndex.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.LlamaIndex.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.add_packages",
		"description": "use_cases.LlamaIndex.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.add_packages",
		"description": "use_cases.LlamaIndex.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.LlamaIndex.add_packages",
		"description": "use_cases.LlamaIndex.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.LlamaIndex.add_packages",
		"documentation": {}
	},
	{
		"label": "qdrant_lectures_content",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "qdrant_lectures_content = vectorstores.QdrantWrapper(\n    qdrant_host=os.getenv(\"QDRANT_HOST\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    configs=configs_vtc,\n    **configs_vtc[\"vector_db\"][\"qdrant\"][\"lectures_content\"],\n)\nqdrant_courses_information = vectorstores.QdrantWrapper(\n    qdrant_host=os.getenv(\"QDRANT_HOST\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    configs=configs_vtc,",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "qdrant_courses_information",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "qdrant_courses_information = vectorstores.QdrantWrapper(\n    qdrant_host=os.getenv(\"QDRANT_HOST\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    configs=configs_vtc,\n    **configs_vtc[\"vector_db\"][\"qdrant\"][\"courses_information\"]\n)\nqdrant_faq = vectorstores.QdrantWrapper(\n    qdrant_host=os.getenv(\"QDRANT_HOST\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    configs=configs_vtc,",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "qdrant_faq",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "qdrant_faq = vectorstores.QdrantWrapper(\n    qdrant_host=os.getenv(\"QDRANT_HOST\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    configs=configs_vtc,\n    **configs_vtc[\"vector_db\"][\"qdrant\"][\"faq\"]\n)\n# *=============================================================================\nsystem_message_onlinica = configs_vtc[\"prompts\"][\"system_message_onlinica\"]\nprompt_onlinica = prompts.create_prompt_tool_calling_agent(\n    system_message_onlinica)",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "system_message_onlinica",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "system_message_onlinica = configs_vtc[\"prompts\"][\"system_message_onlinica\"]\nprompt_onlinica = prompts.create_prompt_tool_calling_agent(\n    system_message_onlinica)\ntools = [\n    qdrant_lectures_content.retriever_tool,\n    qdrant_faq.retriever_tool,\n    qdrant_courses_information.retriever_tool,\n]\nllm = chat_models.create_chat_model(configs_vtc)\nagent = agents.MyAgent(",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "prompt_onlinica",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "prompt_onlinica = prompts.create_prompt_tool_calling_agent(\n    system_message_onlinica)\ntools = [\n    qdrant_lectures_content.retriever_tool,\n    qdrant_faq.retriever_tool,\n    qdrant_courses_information.retriever_tool,\n]\nllm = chat_models.create_chat_model(configs_vtc)\nagent = agents.MyAgent(\n    prompt=prompt_onlinica, tools=tools,",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "tools",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "tools = [\n    qdrant_lectures_content.retriever_tool,\n    qdrant_faq.retriever_tool,\n    qdrant_courses_information.retriever_tool,\n]\nllm = chat_models.create_chat_model(configs_vtc)\nagent = agents.MyAgent(\n    prompt=prompt_onlinica, tools=tools,\n    agent_type=configs_vtc[\"agents\"][\"agent_type_onlinica\"], \n    llm=llm",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "llm",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "llm = chat_models.create_chat_model(configs_vtc)\nagent = agents.MyAgent(\n    prompt=prompt_onlinica, tools=tools,\n    agent_type=configs_vtc[\"agents\"][\"agent_type_onlinica\"], \n    llm=llm\n)",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "agent",
		"kind": 5,
		"importPath": "use_cases.VTC",
		"description": "use_cases.VTC",
		"peekOfCode": "agent = agents.MyAgent(\n    prompt=prompt_onlinica, tools=tools,\n    agent_type=configs_vtc[\"agents\"][\"agent_type_onlinica\"], \n    llm=llm\n)",
		"detail": "use_cases.VTC",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "use_cases.add_packages",
		"description": "use_cases.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "use_cases.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "use_cases.add_packages",
		"description": "use_cases.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "use_cases.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "use_cases.add_packages",
		"description": "use_cases.add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "use_cases.add_packages",
		"description": "use_cases.add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "use_cases.add_packages",
		"description": "use_cases.add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "use_cases.add_packages",
		"documentation": {}
	},
	{
		"label": "create_conversation_chain",
		"kind": 2,
		"importPath": "use_cases.general_chat",
		"description": "use_cases.general_chat",
		"peekOfCode": "def create_conversation_chain(\n    prompt=prompts.general_prompt,\n    llm=llms.llm_openai,\n    memory=memories.ConversationBufferMemory(ai_prefix=\"AI Assistant\"),\n    verbose=False,\n):\n    return chains.ConversationChain(\n        prompt=prompt,\n        llm=llm,\n        memory=memory,",
		"detail": "use_cases.general_chat",
		"documentation": {}
	},
	{
		"label": "get_conversation_chain_response",
		"kind": 2,
		"importPath": "use_cases.general_chat",
		"description": "use_cases.general_chat",
		"peekOfCode": "def get_conversation_chain_response(human_msg, conversation_chain: ConversationChain):\n    result = conversation_chain.invoke(human_msg)['response']\n    return result\nmy_conversation_chain = create_conversation_chain()\n# human_message = \"Hi there\"\n# result = get_conversation_chain_response(human_message, my_conversation_chain)\n# print(result)",
		"detail": "use_cases.general_chat",
		"documentation": {}
	},
	{
		"label": "my_conversation_chain",
		"kind": 5,
		"importPath": "use_cases.general_chat",
		"description": "use_cases.general_chat",
		"peekOfCode": "my_conversation_chain = create_conversation_chain()\n# human_message = \"Hi there\"\n# result = get_conversation_chain_response(human_message, my_conversation_chain)\n# print(result)",
		"detail": "use_cases.general_chat",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "utils.add_packages",
		"description": "utils.add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n    # print(parent_directory)\n    sys.path.append(parent_directory)\n    parent_folder = parent_directory.split(\"/\")[-1]\n    if parent_folder == \"Apps\":\n        break\n    parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "utils.add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "utils.add_packages",
		"description": "utils.add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n    # print(parent_directory)\n    sys.path.append(parent_directory)\n    parent_folder = parent_directory.split(\"/\")[-1]\n    if parent_folder == \"Apps\":\n        break\n    parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "utils.add_packages",
		"documentation": {}
	},
	{
		"label": "current_file_path",
		"kind": 5,
		"importPath": "add_packages",
		"description": "add_packages",
		"peekOfCode": "current_file_path = os.path.abspath(__file__)\nparent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "parent_directory",
		"kind": 5,
		"importPath": "add_packages",
		"description": "add_packages",
		"peekOfCode": "parent_directory = os.path.dirname(current_file_path)\nwhile True:\n  # print(parent_directory)\n  sys.path.append(parent_directory)\n  parent_folder = parent_directory.split(\"/\")[-1]\n  if parent_folder == \"Apps\":\n    break\n  parent_directory = os.path.dirname(parent_directory)\n# pprint(sys.path)\ncwd = os.getcwd()",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "cwd",
		"kind": 5,
		"importPath": "add_packages",
		"description": "add_packages",
		"peekOfCode": "cwd = os.getcwd()\ncwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "cwd_parent",
		"kind": 5,
		"importPath": "add_packages",
		"description": "add_packages",
		"peekOfCode": "cwd_parent = os.path.dirname(cwd)\nwhile cwd_parent.split(\"/\")[-1] != \"Apps\":\n  cwd_parent = os.path.dirname(cwd_parent)\nAPP_PATH = cwd_parent\nload_dotenv()",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "APP_PATH",
		"kind": 5,
		"importPath": "add_packages",
		"description": "add_packages",
		"peekOfCode": "APP_PATH = cwd_parent\nload_dotenv()",
		"detail": "add_packages",
		"documentation": {}
	},
	{
		"label": "model",
		"kind": 5,
		"importPath": "app_chainlit",
		"description": "app_chainlit",
		"peekOfCode": "model = chat_models.chat_openai\nprompt = prompts.ChatPromptTemplate.from_messages([\n  (\n    \"system\",\n    (\"You're a very knowledgeable historian who provides accurate and eloquent \"\n     \"answers to historical questions.\"),\n  ),\n  (\n    \"human\",\n    \"{question}\",",
		"detail": "app_chainlit",
		"documentation": {}
	},
	{
		"label": "prompt",
		"kind": 5,
		"importPath": "app_chainlit",
		"description": "app_chainlit",
		"peekOfCode": "prompt = prompts.ChatPromptTemplate.from_messages([\n  (\n    \"system\",\n    (\"You're a very knowledgeable historian who provides accurate and eloquent \"\n     \"answers to historical questions.\"),\n  ),\n  (\n    \"human\",\n    \"{question}\",\n  )",
		"detail": "app_chainlit",
		"documentation": {}
	},
	{
		"label": "chain",
		"kind": 5,
		"importPath": "app_chainlit",
		"description": "app_chainlit",
		"peekOfCode": "chain = chains.LLMChain(\n  llm=model, prompt=prompt, output_parser=output_parsers.StrOutputParser()\n)\nuser_session = \"chain\"\n#* =============================================================================\n@cl.on_chat_start\n# A hook called when a new chat session is created.\nasync def on_chat_start():\n  # Whenever user connects to Chainlit app, new chat session is created. \n  # Chat session goes through life cycle of events, respond by defining hooks.",
		"detail": "app_chainlit",
		"documentation": {}
	},
	{
		"label": "user_session",
		"kind": 5,
		"importPath": "app_chainlit",
		"description": "app_chainlit",
		"peekOfCode": "user_session = \"chain\"\n#* =============================================================================\n@cl.on_chat_start\n# A hook called when a new chat session is created.\nasync def on_chat_start():\n  # Whenever user connects to Chainlit app, new chat session is created. \n  # Chat session goes through life cycle of events, respond by defining hooks.\n  # Creates a runnable for each chat session.\n  logger.info(\"A new chat session has started.\")\n  cl.user_session.set(user_session, chain)",
		"detail": "app_chainlit",
		"documentation": {}
	}
]
