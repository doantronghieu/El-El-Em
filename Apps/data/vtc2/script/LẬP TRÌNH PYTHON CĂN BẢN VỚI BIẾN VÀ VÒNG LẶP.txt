# Course: LẬP TRÌNH PYTHON CĂN BẢN VỚI BIẾN VÀ VÒNG LẶP
## Section 1: Giới thiệu tổng quan 
### Subsection 1: Giới thiệu chuyên gia và khóa học
Chào các bạn, tôi là Trọng Nghĩa, chào mừng các bạn đến với khóa học của tôi ngày hôm nay.
Xin chào các bạn, tôi là Đinh Nguyễn Trọng Nghĩa, tôi đang công tác tại trường Công Thương Thành phố Hồ Chí Minh.
Tôi đang giảng dạy tại bộ môn khoa học dữ liệu và trí tuệ nhân tạo thuộc khoa công nghệ thông tin của trường. Hôm nay tôi hào hứng chia sẻ với các bạn một cái khóa học, đó là Python cơ bản thông qua biến và vòng lặp. 
Với hơn 10 năm kinh nghiệm lập trình và giảng dạy, tôi tin rằng sự hiểu biết về Python sẽ góp phần trong sự phát triển trong lĩnh vực công nghệ thông tin của chúng ta, đặc biệt là trong thời đại mà trí tuệ nhân tạo phát triển mạnh mẽ như hiện nay.
Trong khóa học này tôi sẽ hướng dẫn các bạn về biến và vòng lặp từ những cái khai báo biến cơ bản cho đến cách sử dụng những câu lệnh rẽ nhánh cũng như câu lệnh lặp để điều khiển luồng dữ liệu. 
Ngoài những cái bài học lý thuyết thì chúng ta sẽ có ngay những bài tập thực hành để các bạn có thể áp dụng ngay những cái kiến thức đã học.
Khóa học này dành cho tất cả mọi người từ những bạn chưa biết gì về lập trình đến những người đã có kinh nghiệm về lập trình. Thông qua khóa học này thì các bạn có thể xây dựng những bước đầu tiên trên con đường lập trình về Python để có thể trở thành những người lập trình về trí tuệ nhân tạo hoặc là phân tích dữ liệu chuyên nghiệp sau này.
## Section 2: Giới thiệu Python
### Subsection 1: Giới thiệu Python
Để bắt đầu khóa học thì tôi sẽ giới thiệu cho các bạn về ngôn ngữ lập trình Python. Ngôn ngữ lập trình Python là một ngôn ngữ mạnh mẽ và linh hoạt với đặc điểm dễ học có hiệu suất cao và một cái cộng đồng rộng lớn, thì đây là một số cái lợi ích mà chúng ta có thể thấy được ngay ở trong ngôn ngữ lập trình Python. Để cụ thể hơn về những lợi ích này thì chúng ta sẽ tiếp tục cùng nhau khám phá.
Ngôn ngữ lập trình Python là một ngôn ngữ cực kì dễ học bởi vì cú pháp của nó gần với ngôn ngữ tự nhiên, với cái tính chất dễ học này các bạn sẽ rút ngắn được thời gian để hiểu được cái ngôn ngữ lập trình này và tăng khả năng phát triển phần mềm của chúng ta.
Thứ 2 đây là một ngôn ngữ lập trình linh hoạt và mạnh mẽ với nhiều khả năng ứng dụng, chúng ta có thể áp dụng ngôn ngữ lập trình Python trong những cái tác vụ phân tích dữ liệu, thiết kế web cũng như là phát triển những cái ứng dụng về trí tuệ nhân tạo.
Thứ ba, mặc dù đây là một ngôn ngữ dễ học tuy nhiên ngôn ngữ lập trình này có hiệu suất cao không kém gì các ngôn ngữ nổi tiếng khác ví dụ như C, C++, Java hay là những ngôn ngữ khác.
Cuối cùng ngôn ngữ lập trình Python có một cái cộng đồng lập trình viên cực kỳ rộng lớn nếu như các bạn có bất kỳ một câu hỏi nào liên quan đến cái vấn đề lập trình thì các bạn có thể là tìm đến cộng đồng và chúng ta có thể nhận được câu trả lời ngay lập tức.
Tiếp theo tôi sẽ giới thiệu cho các bạn về một số ứng dụng của ngôn ngữ lập trình Python. 
Trước hết đó là phân tích dữ liệu. Python có những gói công cụ hỗ trợ phân tích dữ liệu cực kỳ mạnh mẽ ví dụ như NumPy, Pandas giúp chúng ta xử lý dữ liệu, Matplotlib, Seaborn chúng ta có thể trực quan hóa dữ liệu.
Thứ 2 đó là trí tuệ nhân tạo và máy học. Python hỗ trợ chúng ta xây dựng những mô hình trí tuệ nhân tạo và máy học nhanh chóng. Ví dụ như một số cái gói hỗ trợ như là Keras, PyTorch.
Thứ ba trong lĩnh vực phát triển web. Thì Python có những cái framework giúp chúng ta phát triển web nhanh chóng. Ví dụ như Flask hoặc là Django.
Thứ tư đó là phát triển ứng dụng. Với Python, chúng ta có thể sử dụng những gói hỗ trợ như BeeWare hoặc là Kivy để phát triển những ứng dụng trên thiết bị di động hoặc là đa nền tảng.
Và cuối cùng chúng ta có thể sử dụng Python trong vấn đề tự động hóa, chúng ta có thể tự động hóa những công việc nhàm chán hàng ngày của mình ví dụ như xử lý file hoặc là chúng ta có thể áp dụng để mà thực hiện tính toán trong Excel với những câu lệnh Python đơn giản.
Tiếp theo tôi sẽ hướng dẫn các bạn cài đặt một số phần mềm và công cụ cần thiết để chúng ta bắt đầu với khóa học. Ở đây thì chúng ta sẽ cần cài đặt đó là Python và một cái phần mềm hỗ trợ đó là Anaconda. Thực tế thì khi chúng ta thực hiện thì chúng ta có thể chọn 1 trong 2. Các bạn có thể truy cập vào trang web Python.org để tải cái phần mềm Python ở đây thì chúng ta sẽ vào cái mục download, thì ờ ở đây chúng ta có là download for Windows. Thì ờ phiên bản hiện tại là Python 3.11, chúng ta có thể tải cái phiên bản này về máy. Cái phần mềm thứ 2 đó là Anaconda. Phần mềm này, đây là một cái gói phần mềm và trong gói phần mềm này thì nó sẽ bao gồm nhiều cái gói con để hỗ trợ cho chúng ta làm việc tốt hơn với Python, tức là ở đây nó sẽ không chỉ với Python mà nó còn một số cái gói hỗ trợ để thực hiện phân tích dữ liệu. Rồi ở đây thì à tôi sẽ cài cái phần mềm Anaconda, ở đây thì các bạn sẽ vào trang web là Anaconda.com/download và chúng ta sẽ thấy cái nút download ở đây. Ở đây thì khi chúng ta bấm vào nút download thì nó sẽ download những cái file cần thiết ứng với cái phiên bản của cái hệ điều hành của mình. Rồi oke. Ở đây thì tôi đã download một cái phần mềm đó là Python 3.11 và Anaconda phiên bản là 3.2003. Nếu chúng ta muốn cài Python thì chúng ta có thể mở cái file Python 3.11 này rồi chọn Run. Với cái file Python này thì nó cực kỳ đơn giản để dễ cài đặt. Ở đây chúng ta chỉ cần là bấm Install Now, thì nó sẽ cài đặt cho hệ thống chúng ta. 
Đối với phần mềm Anaconda thì nó hơi phức tạp chút xíu. Đây chúng ta có thể là mở cái file Anaconda 3.DSE ở đây. Chúng ta chọn Run, Next và chúng ta sẽ đồng ý với các chính sách. Sau đó chọn Just me và cái đường dẫn để chúng ta cài đặt cái gói phần mềm Anaconda. Ở đây thì đường dẫn mặc định là trong thư mục Admin và Anaconda 3. Rồi ở đây thì, cái bước tiếp theo đó là một số cái Option liên quan đến cái cài đặt. Cái đầu tiên đó là tạo một cái Start menu shortcuts, thông thường chúng ta sẽ tích vào đây. Cái thứ 2 là Add Anaconda vào cái Path environment variable, thì cái này khuyến cáo là các bạn nên tick vào, mặc dù ở đây ghi là Not recommended tức là không khuyến cáo, tức là bản thân phần mềm thì nó sẽ không khuyến cáo điều này, tuy nhiên thì chúng ta nên tick vào đây bởi vì khi chúng ta cài đặt và chúng ta đưa vào luôn cái PATH environment thì cái Python chúng ta nó sẽ lập tức chạy được ngay. Mục tiếp theo chúng ta sẽ có là đăng ký Anaconda 3 trở thành cái default Python 3 và cuối cùng là chúng ta sẽ xóa những cái Package sau khi đã cài đặt thành công. Rồi chúng ta nên tick chọn tất cả những cái chọn này và sau đó bấm Install. 
Rồi ở đây các bạn sẽ thấy là cái thanh chạy này nó sẽ bắt đầu thực hiện và nó sẽ cài đặt những cái file cần thiết vào hệ thống của mình, cái thời gian cài đặt thì nó sẽ tùy thuộc vào cái hệ điều hành ta cũng như là cái tốc độ xử lý của máy tính của mình. 
Đối với phần mềm Python thì hiện tại Python hỗ trợ hầu hết các hệ điều hành, các bạn hoàn toàn có thể sử dụng laptop hoặc là máy PC của chúng ta để cài những phần mềm Python này. Python thì tương đối nhẹ do đó khi chúng ta cài đặt thì nó sẽ không ảnh hưởng nhiều bởi cái hệ thống. Tuy nhiên thì nếu chúng ta muốn cái chương trình chúng ta chạy nhanh hơn thì đương nhiên là ram tốt hơn sẽ chạy nhanh hơn. Ngoài ra thì nếu chúng ta thực hiện những cái tác vụ lớn ví dụ như những cái tác vụ mà phân tích dữ liệu hoặc là thực hiện những cái ứng dụng AI thì Card màn hình nó cũng sẽ đóng vai trò khá quan trọng trong những vấn đề đó. Ví dụ như là khi chúng ta thực hiện trên những cái model thì lúc đó card màn hình sẽ đóng vai trò quan trọng hơn tuy nhiên thì đối với những trường hợp chúng ta lập trình căn bản như thế này thì chỉ cần một cái ram bình thường ví dụ như là 4GB hoặc là 8GB là hoàn toàn chúng ta có thể chạy được những tác vụ ở đây.
Như vậy thì cái phần mềm Anaconda đã được cài đặt thành công rồi bây giờ chúng ta sẽ Finish. Để kiểm tra xem là phần mềm đã cài đặt đúng đắn hay chưa, thì bây giờ chúng ta sẽ chạy một cái cmd, chúng ta mở start và gõ vào tìm kiếm, chúng ta sẽ mở cmd. Ở đây chúng ta gõ Python gạch gạch version, nếu như cài đặt thành công thì chúng ta sẽ thấy là xuất hiện ở đây là Python với cái phiên bản trong máy mình cài đặt, ví dụ như ở đây tôi đã cài được là Python 3.10.9 thì đây là cái phiên bản Python hiện tại. Một cái phần mềm thứ 3 mà tôi giới thiệu cho các bạn, đó là một cái Code editor, thì đây là phần mềm này nó là Visual Studio Code. Phần mềm này chuyên để viết code. Ở đây thì chúng ta sẽ sử dụng phần mềm này để viết các code Python ngoài ra thì nếu như các bạn có làm việc với các ngôn ngữ lập trình khác thì chúng ta hoàn toàn có thể sử dụng những phần mềm này để viết những cái code khác ví dụ như Java, JavaScript, PHP, v.v. Ở đây thì chúng ta sẽ click vào cái nút download dành cho Windows, Windows 8, 10, 11 hoặc là những cái hệ điều hành khác, nếu như các bạn có cái máy với hệ điều hành khác. Rồi ở đây thì cài đặt ha, ở đây chúng ta cài đặt phần mềm Visual Code này cực kỳ đơn giản thôi. Ở đây chúng ta sẽ Run và chủ yếu là sẽ Next, đây chúng ta sẽ Next qua tất cả các bước và bấm Install là xong.
Rồi như vậy thì chúng ta đã cài đặt thành công những cái phần mềm cần thiết bây giờ chúng ta sẽ tạo một cái thư mục. Đây giả sử tôi tạo một cái thư mục là lập trình Python, chúng ta mở cái thư mục này click phải vào cái vùng trống ở đây, chúng ta sẽ thấy xuất hiện một cái mục đó là Open with Code. Khi mà click vào thì phần mềm Visual Code nó sẽ được mở ra với cái không gian làm việc đó là cái thư mục của chúng ta.
Để tạo một cái file mới ở trong phần mềm này thì chúng ta có thể click vào đây, ví dụ đây chúng ta tạo một cái file. Đây chúng ta chọn Trust nếu như cái hệ thống nó hỏi. Chúng ta có thể click vào cái nút này để tạo một cái file mới, ví dụ đây chúng ta tạo Hello.py và chúng ta có thể viết code Python ở bên cái phần bên phải ở đây. Bây giờ chúng ta đã cài đặt được những phần mềm cần thiết để thực hiện với cái khóa học này, tiếp theo thì chúng ta sẽ làm việc với biến và các kiểu dữ liệu.
## Section 3: Biến và Dữ liệu
### Subsection: Biến và Dữ liệu
Sau phần cài đặt thì tôi sẽ giới thiệu cho các bạn về biến. Biến là một cái đơn vị cơ bản trong Python và dùng để lưu trữ dữ liệu. Trong Python, biến cực kỳ linh hoạt bởi vì chúng ta không cần phải khai báo trước kiểu dữ liệu của biến. Giờ tôi sẽ minh họa cho các bạn về một số cái vấn đề liên quan đến biến và khai báo biến. 
Ở đây thì chúng ta sẽ thấy một cái giao diện đó là giao diện comment chrome. Chúng ta có thể gọi một cái lệnh đó là ipython để chạy những cái câu lệnh Python ngay trong cái giao diện này mà không cần một cái code. Ở đây chúng ta có thể nhập trực tiếp những cái câu lệnh Python vào đây, giả sử chúng ta muốn khai báo biến chúng ta có thể đặt một cái tên biến. Ví dụ như ở đây tôi đặt age là 20. Enter. Thì ở đây chúng ta thấy rằng là cái giá trị 20 nó được gán cho cái biến a này và khác với tất cả những ngôn ngữ lập trình khác, chúng ta sẽ không cần phải khai báo kiểu dữ liệu khi chúng ta khai báo biến. Biến a ở đây nó sẽ là một cái kiểu dữ liệu số chính xác hơn đó là một cái kiểu dữ liệu số nguyên, nếu chúng ta muốn sử dụng chúng ta chỉ việc gọi đúng cái tên này mà thôi. Ví dụ đây chúng ta sử dụng một cái hàm print và ở đây chúng ta in cái biến a này ra thì chúng ta sẽ thấy giá trị của nó là 20.
Trong Python thì các biến khá linh động, có nghĩa là khi chúng ta gán một cái giá trị cho nó thì nó sẽ mang một cái kiểu dữ liệu, ví dụ ở trên này chúng ta có một cái age là bằng 20 có nghĩa là nó là kiểu dữ liệu số nguyên. Bên dưới này chúng ta hoàn toàn có thể gán cho nó một cái giá trị khác với kiểu dữ liệu khác ví dụ đây chúng ta có thể gõ age và chúng ta gán cho một cái giá trị khác, giả sử là kiểu chuỗi ví dụ đây tôi gán cho chữ Hello thì lúc này a nó sẽ nhận cái giá trị là Hello mà không còn là giá trị 20 nữa. Và nếu chúng ta thực hiện lệnh print thì chúng ta sẽ thấy là nó in ra chữ Hello cho chúng ta.
Nói về biến thì chúng ta phải nói thêm một cái khái niệm đó là kiểu dữ liệu bởi vì mỗi biến nó sẽ mang một cái giá trị nào đó và một giá trị nó sẽ tương ứng với một kiểu dữ liệu. Ở đây thì chúng ta thấy rằng, chúng ta đã có 2 cái kiểu dữ liệu kiểu dữ liệu số nguyên và kiểu dữ liệu chuỗi, bây giờ tôi sẽ tổng kết lại cho các bạn về một số kiểu dữ liệu trong Python. 
Đầu tiên là kiểu dữ liệu số. Ở đây có 20 là số nguyên, thì chúng ta ngoài kiểu dữ liệu số nguyên thì chúng ta còn có kiểu dữ liệu số thực, ví dụ như ở đây chúng ta gán a bằng 1.5 thì a này nó sẽ mang giá trị là 1.5 và kiểu dữ liệu của nó là một kiểu dữ liệu số thực. Số thực có nghĩa là có dấu chấm thập phân.
Ở đây chữ Hello chúng ta thấy là một cái kiểu dữ liệu chuỗi trong Python để biểu diễn một kiểu dữ liệu chuỗi chúng ta sử dụng dấu nháy đơn (‘) là chữ Hello nè. Chúng ta để trong dấu nháy đơn ví dụ đây chữ s gán cho chữ Hello. Đây là một kiểu dữ liệu chuỗi. Chúng ta có thể s gán cho chữ hello nhưng đặt trong dấu nháy kép thì ở đây nó vẫn là kiểu dữ liệu chuỗi. Trong Python thì dấu nháy đơn và dấu nháy kép nó sẽ tương đương với nhau.
Kiểu dữ liệu thứ 3, đó là kiểu dữ liệu mảng. Ở đây giả sử chúng ta có một cái mảng a và chúng ta gán cho một cái mảng mới thì đây mảng được biểu thị bằng 2 cái dấu: 1 cái dấu ngoặc vuông mở ([) và 1 cái dấu ngoặc vuông đóng (]). Bên trong chúng ta sẽ liệt kê các phần tử của mảng ví dụ đây chúng ta có 1, 2, 3, 4, 5 thì đây chúng ta sẽ có được rằng là một cái a nó là một cái mảng hay trong Python nó còn gọi là một cái dãy với 5 phần tử từ 1 đến 5 nếu chúng ta in ra biến a này thì chúng ta sẽ thấy là nó sẽ xuất ra chúng ta một cái mảng gồm năm phần tử.
Ngoài cái mảng thì chúng ta sẽ còn một số cái kiểu dữ liệu khác nó tương ứng, ví dụ như là kiểu dữ liệu tập hợp thì thay vì chúng ta để cái dấu ngoặc vuông thì chúng ta có thể để cái dấu ngoặc nhọn ({) thì nó sẽ trở thành cái kiểu dữ liệu tập hợp. Ví dụ đây chúng ta để 1, 2, 3, 4, 5 thì chúng ta sẽ có một tập hợp gồm năm phân tử. Tập hợp nó sẽ khác với mảng, đó là tập hợp không được phép có phần tử trùng hay nói khác nếu chúng ta khai báo có phần tử trùng thì nó sẽ lập tức bị xóa đi, ví dụ ở đây chúng ta khai báo là 1, 1, 1, 4, 5 thì khi chúng ta in ra biến a này thì chúng ta sẽ thấy là các phần tử của nó chỉ gồm 1, 4, 5 bởi vì những phần tử trùng nó sẽ bị bỏ đi. 
Ngoài kiểu mảng và kiểu tập hợp thì chúng ta còn cái kiểu đó là kiểu dictionary, ở trong Python nó gọi là dictionary. Trong Tiếng Việt thì chúng ta chưa có một cái tên gọi để cho tương ứng cho nên thì ở đây tôi vẫn gọi đó là dictionary. Kiểu dictionary thì nó sẽ gồm một cái key và một cái value ở trong mỗi phần tử, ví dụ đây chúng ta có 1: ‘x’, 2: ‘y’ thì đây là một cái dạng kiểu dictionary. Rồi ở đây thì tôi gõ bị thiếu một cái dấu ngoặc đây chúng ta sẽ đóng lại, thì đây là một cái kiểu dictionary. Nếu chúng ta in ra biến a thì chúng ta sẽ thấy nó sẽ xuất ra dưới dạng này và chúng ta có thể truy xuất nó dưới dạng key ví dụ đây chúng ta có thể truy xuất dưới dạng là a [1] thì nó sẽ xuất ra cái giá trị của cái phân tử thứ nhất cho chúng ta.
Kiểu dữ liệu cuối cùng và cũng khá đặc biệt đó là kiểu dữ liệu luận lý hay kiểu dữ liệu Boolean. Kiểu dữ liệu này thì nó chỉ nhận 2 giá trị thôi. Giá trị đúng và giá trị sai ví dụ như chúng ta có một cái biến b gán cho giá trị là True thì ở đây b nó là đúng, ví dụ c chúng ta gán cho giá trị là False thì nó sẽ nhận giá trị là sai. Thì đây là kiểu dữ liệu thông thường chúng ta sử dụng để kiểm tra. Chúng ta sẽ sử dụng cái kiểu dữ liệu này ở trong những câu lệnh kiểm tra ví dụ như câu lệnh if rẽ nhánh mà chúng ta sẽ học trong bài học tiếp theo.
Để thao tác với biến thì thông thường chúng ta phải tương tác với người dùng có nghĩa là chúng ta sẽ cần những cái thông tin mà người dùng nhập vào cũng như là xuất ra cho người dùng. 
Bây giờ chúng ta sẽ tạo một cái file mới chúng ta không sử dụng trên chorme nữa mà tạo một file mới bởi vì chúng ta sẽ viết một cái chương trình. Đây chúng ta sẽ viết một cái chương trình đầu tiên của mình, ví dụ đây: input.py. Một chương trình Python thì chúng ta hoàn toàn có thể là viết trong một cái file .py không cần những cái từ khóa bắt đầu hay kết thúc giống như những cái chương trình khác. Chúng ta có thể viết một cái hàm là input, hàm input này cho phép nhận thông tin từ người dùng nhập từ bàn phím. Ở đây chúng ta thấy rằng là cái thông số thứ nhất của hàm này đó là một cái chuỗi và một cái chuỗi này để hiển thị ra cho người dùng biết là mình cần nhập cái gì. Ví dụ đây tôi gõ vào là ‘Nhập tên của bạn’. Enter. Trong Python thì khi chúng ta kết thúc một câu lệnh chúng ta Enter xuống và chúng ta nhập câu lệnh tiếp theo không cần dấu chấm phẩy ở cuối dòng. 
Sau khi người dùng nhập vào một cái thông tin nào đó từ bàn phím thì hàm input sẽ trả về thông tin đó do đó để thu được thông tin từ người dùng nhập vào chúng ta phải thực hiện một cái phép gán. Gán cái hàm input này cho một cái biến nào đó. Rồi cách đặt tên biến thì chúng ta đã thảo luận với nhau, thì đây chúng ta giả sử đặt tên là Name, chúng ta có một cái tên biến là Name và gán cho cái hàm input, sau đó thì chúng ta sẽ xuất ra bằng một cái lệnh đó là print. Lệnh print này đây là lệnh output cơ bản trong Python và nó sẽ xuất ra màn hình cho người dùng xem được nội dung, ví dụ đây chúng ta chạy trên comment chrome thì chúng ta sẽ xuất những nội dung trong hàm print lên cái comment chrome cho người dùng, ví dụ đây chúng ta xuất ra là ‘Tên của bạn là: ‘ và , name. Khi Python đọc đến câu lệnh này thì ở đây là một chuỗi do đó sẽ xuất ra trên cái comment chrome. Sau đó đến cái name, thì chúng ta thấy rằng là name là một biến, như vậy thì Python sẽ truy cập đến cái dữ liệu của cái biến này dữ liệu lưu trong biến này và truyền đến cái comment chrome cho chúng ta. Rồi như vậy chúng ta hoàn thành cái chương trình đầu tiên của mình và chúng ta có thể chạy cái chương trình Python này. Ở đây chúng ta có một cái thư mục là lập trình Python và chúng ta có thể double click vào click vào trên thanh tiêu đề chúng ta gõ chữ cmd. Trên đây nó sẽ xuất hiện cái comment chrome và chúng ta thấy rằng là cái dấu nhắc nó đang ở cái thư mục hiện hành là cái thư mục lập trình Python do đó thì chúng ta có thể gọi cái file của chúng ta đây chúng ta gọi Python khoảng trắng và input.py. Như vậy thì với cái giọng này chúng ta chạy được cái file Python của chúng ta mới vừa viết xong. Đây chúng ta thấy là nhập tên của bạn, ví dụ tôi nhập tên là Nghĩa và nó sẽ xuất ra chúng ta là tên của bạn là Nghĩa. 
Như vậy thì trong mục này thì tôi giới thiệu cho các bạn về 2 cái hàm cơ bản một cái hàm sử dụng để input có nghĩa là hiển thị một cái dấu nhắc và để người dùng nhập vào cũng như một cái hàm là output cơ bản xuất ra cho người dùng thấy những thông tin mình cần.
Chúng ta sẽ quay lại giao diện ipython để thực hiện một số cái phép toán cơ bản ở trong Python. Phép toán cơ bản trong Python nó sẽ bao gồm: thứ nhất là phép toán số học, thứ hai là phép toán gán và thứ ba là những phép toán so sánh.
Đầu tiên thì tôi sẽ minh họa cho các bạn về các phép toán số học. Các phép toán số học thì đương nhiên nó sẽ bao gồm cộng, trừ, nhân chia và lũy thừa. Ví dụ chúng ta muốn cộng thì cực kỳ đơn giản thôi, ví dụ chúng ta có 7 cộng 5 thì kết quả chúng ta sẽ được là 12. Trừ thì tương tự như vậy. Và nhân thì chúng ta sẽ sử dụng dấu sao (*) ví dụ 7 sao 5 thì là 7 nhân 5 là chúng ta sẽ được kết quả là 35. Đối với trường hợp chia chúng ta sẽ sử dụng một dấu xẹt, ví dụ như đây 7 chia 5 thì chúng ta sẽ được là kết quả 1,4. Tuy nhiên thì trong phép chia của Python thì còn hai phép chia nữa đó là chia lấy phần nguyên và chia lấy phần dư. Ví dụ chúng ta muốn lấy phần nguyên thì chúng ta sẽ sử dụng 2 dấu gạch (//) như thế này và chia 5, ví dụ 7 chia 5 và lấy phần nguyên thì chúng ta được 1. Như là kết quả ở trước thì chúng ta thấy là 7 chia 5 thì được 1.4 và lấy phần nguyên thì chúng ta sẽ được kết quả là 1, tức là chúng ta sẽ được kết quả là số nguyên. Đối với chia phần dư thì chúng ta sẽ là 7 phần trăm (%) 5, thì dấu phần trăm này thể hiện cho phép chia lấy phần dư. Và ở đây chúng ta thấy là kết quả là được 2 bởi vì 7 chia 5 sẽ được 1 và dư 2. Như vậy thì 7 chia 5 và lấy phần dư nó sẽ được giá trị là 2. 
Đối với trường hợp phép gán. Thì chúng ta sẽ có cái cú pháp như sau: khi chúng ta có biến a bằng sau đó bên phải của dấu bằng là một cái biểu thức nào đó, ví dụ như đây 5+5. Biến a sau cái kết quả của phép gán này thì sẽ được giá trị là 10. Chúng ta thấy là cái biểu thức bên phải của phép gán sẽ được thực thi và gán cho giá trị của biến. Đối với phép gán thì chúng ta sẽ còn một số cái phép nó đặc biệt chút xíu, ví dụ như a cộng bằng (+=) 5, ví dụ như thế này a += 5 nó sẽ tương đương với a = a + 5. Đối với trường hợp này a hiện tại đang có giá trị là 10 sau đó cộng thêm năm là 15 và gán ngược trở lại giá trị của a như vậy thì a sau biểu thức a += 5 sẽ được giá trị là 15. Tương tự như vậy chúng ta sẽ có trừ bằng (-=), nhân bằng (*=) và chia bằng (/=), cực kỳ đơn giản thôi. 
Loại phép toán thứ ba trong Python đó là phép toán so sánh. Phép toán so sánh thì đơn giản chúng ta sẽ có nhỏ hơn (<) lớn hơn (>), ví dụ ở đây chúng ta ghi 7 < 5 rõ ràng ở đây nó trả vời chúng ta một cái giá trị đó là giá trị luận lý, hay chúng ta còn gọi là giá trị đúng hay sai. Trong trường hợp này 7 < 5 thì nó sẽ trả về cho chúng ta đó là giá trị false, giá trị là sai. Nếu chúng ta viết là 7 > 5 thì ở đây nó sẽ trả về đó là giá trị là true có nghĩa là đúng. Ngoài nhỏ hơn, lớn hơn chúng ta còn 7 nhỏ hơn hoặc bằng (<=) thì chúng ta sẽ viết thì chúng ta sẽ viết dấu nhỏ hơn và viết dấu bằng liên tiếp nhau. Ví dụ như 7 <= 5 thì trả về chúng ta giá trị sai và tương tự như vậy 7 >= 5 thì sẽ có giá trị là đúng. Nếu chúng ta muốn so sánh bằng thì chúng ta sẽ sử dụng 2 dấu bằng (==), ví dụ đây 5 == 5 thì chúng ta thấy là sẽ trả về giá trị đúng và 7 == 5 sẽ trả về chúng ta giá trị là sai. Các bạn chú ý rằng ở đây muốn thực hiện phép toán so sánh bằng thì chúng ta sẽ sử dụng 2 dấu bằng chứ không phải là 1 dấu bằng nếu chúng ta ghi một dấu bằng thì đó chính là phép gán.
Để hiểu rõ hơn về vấn đề biến và dữ liệu thì chúng ta sẽ có một cái bài tập thực hành nho nhỏ. 
Bây giờ chúng ta sẽ tạo một cái file mới là tinhluong.py. Bài tập thực hành này nó sẽ yêu cầu là chúng ta nhập số giờ làm việc của một nhân viên và lương theo giờ sau đó chúng ta sẽ xuất ra tổng lương của nhân viên. Cực kỳ đơn giản thôi. Đây chúng ta sẽ có một cái input, đó là số giờ và lương theo giờ. Output là chúng ta sẽ xuất ra lương của nhân viên. Các bạn sẽ thấy ở đây 2 dòng đầu tôi sử dụng một cái dấu thăng (#) ở trước những cái dòng này có nghĩa là những cái dòng này là comment hay nó khác là ghi chú ở trong cái file code của chúng ta và khi Python đọc đến những cái file ghi chú này thì Python sẽ bỏ qua và không thực thi. Rồi đối với trường hợp này, đối với bài tập này thì đầu tiên chúng ta sẽ nhập số giờ, như vậy thì ở đây chúng ta sẽ có một cái biến là số giờ bằng input số giờ nhân viên. Cái input thứ 2 là lương theo giờ, lương theo giờ của nhân viên. Và sau đó chúng ta sẽ thực hiện output có nghĩa là thực hiện hàm print tổng lương. Rồi chúng ta sẽ xuất ra một cái con số nào đó. Tuy nhiên bây giờ chúng ta sẽ thực hiện tính con số này. Nếu chúng ta biết được số giờ và biết được lương theo giờ thì chúng ta sẽ thực hiện một cái phép toán đó là phép nhân để thực hiện tính tổng lương. Như vậy chúng ta sẽ có một cái biến là tổng lương và tổng lương này sẽ bằng số giờ nhân lương theo giờ. Đây chúng ta có thể bấm tab để cho nó sẽ xuất hiện cái này cho chúng ta cái Visual Code nó hỗ trợ chúng ta gõ code nhanh chóng hơn. Rồi sau đó chúng ta thực hiện hàm print tổng lương nhân viên, thì đây tổng lương nó sẽ là đưa vào trong cái hàm print này phẩy cái và chúng ta đưa cái biến tổng lương vào đây. Khi Python thực thi cái dòng này thì sẽ xuất ra tổng lương nhân viên hai chấm và sau đó đưa cái giá trị của biến tổng lương vào đây. Save lại chúng ta có thể chạy cái cmd để thực thi cái file tinhluong.py này.
Rồi chúng ta quay lại cmd và chúng ta gọi lệnh Python tinhluong.py. Enter. Thì đây chúng ta nhập số giờ nhân viên, ở đây chúng ta sẽ nhập số giờ của nhân viên, ví dụ như chúng ta có 40 giờ và mỗi giờ thì chúng ta khoảng 70.000 chẳng hạn thì đây chúng ta sẽ có. Rồi ở đây thì chúng ta thấy là nó xuất hiện một cái lỗi, bởi vì nó báo rằng là không thể nhân những cái biến mà không phải kiểu, nó báo rằng là không thể nhân những cái biến mà không phải kiểu số do đó thì chúng ta bắt buộc chúng ta phải chuyển dữ liệu của chúng ta về kiểu số, bởi vì sao, bởi vì khi nhập vào đây Python hiểu rằng đây là một kiểu, khi chúng ta nhập vào đây thì Python hiểu rằng đây là một kiểu chuỗi mà không phải kiểu số. Do đó chúng ta phải chuyển những cái giá trị này sang kiểu số. Bây giờ chúng ta sẽ quay lại cái code của mình. Thay vì chúng ta để cái hàm input như thế này thì đây chúng ta sẽ thêm một cái hàm là hàm int để thực hiện chuyển dữ liệu từ chuỗi sang số, tương tự như vậy đối với cái lưu theo giờ này. Quay lại và chúng ta có thể chạy lại cái chương trình của mình ví dụ nhập 40 và 70.000 thì đây chúng ta thấy là nhân thành công và nó xuất ra ta là tổng lương nhân viên là như thế này.
Rồi, chúng ta đã hoàn thành xong một cái bài tập nho nhỏ để ôn tập về cái phần biến và dữ liệu.
## Section 4: Câu lệnh rẽ nhánh
### Subsection 1: Câu lệnh rẽ nhánh 
Phần tiếp theo của khóa học thì tôi sẽ giới thiệu cho các bạn về các câu lệnh rẽ nhánh. 
Và phần đầu tiên thì tôi sẽ giới thiệu về câu lệnh If-else, tiếp theo là một cái loại câu lệnh rẽ nhánh cơ bản và khi điều kiện ở if là đúng thì sẽ thực thi một cái đoạn lệnh nào đó và nếu là sai thì sẽ thực thi một cái đoạn lệnh khác. 
Giả sử ở đây tôi tạo ra một cái file mới là ifesle.py. Cú pháp của câu lệnh rẽ nhánh if-esle, đầu tiên chúng ta sẽ có một cái từ khóa là if sau đó đến điều kiện và cuối cái câu lệnh này chúng ta sẽ có dấu 2 chấm (:) khi gõ 2 chấm thì câu lệnh tiếp theo chúng ta nhớ là thụt vào như thế này, sau đó thì đây là nếu như điều kiện đúng thì chúng ta sẽ thực hiện một cái đoạn lệnh nào đó. Sau đó chúng ta sẽ thụt lại và chúng ta có cái lệnh else và tiếp tục có 2 chấm, nếu như điều kiện sai chúng ta sẽ tiếp tục thực hiện những cái đoạn lệnh ở cái code 2 này. Thì đây là cái cú pháp của câu lệnh if-else.
Tôi có thể minh họa cho các bạn ngay về câu lệnh này. Giả sử tôi có một cái biến age là 20, bây giờ chúng ta sẽ thực hiện một cái kiểm tra if age lớn hơn 18, thông thường thì chúng ta sẽ để cái điều kiện này trong dấu ngoặc như thế này tuy nhiên thì nó không bắt buộc. Cuối lệnh if chúng ta sẽ có 2 chấm. Sau đó chúng ta xuống dòng thì trong Visual Code khi chúng ta gặp một cái 2 chấm và xuống dòng thì Visual Code sẽ tự động nhảy vào cho chúng ta. Đoạn lệnh đầu tiên thì chúng ta sẽ đơn giản thôi in ra bạn đã đủ tuổi lái xe, ví dụ như vậy. Enter và chúng ta bấm nút backspace để quay về độ rộng (?) else 2 chấm và print: bạn chưa đủ tuổi lái xe. Rồi chương trình chúng ta nó chỉ đơn giản như vậy và bây giờ chúng ta có thể chạy thử chương trình này. Python ifelse.py thì đây rõ ràng nó xuất ra chúng ta bạn đã đủ tuổi lái xe bởi vì cái age này chúng ta gán cho bạn 20. Thì 20 sau khi được đưa vào trong câu lệnh if nó sẽ so sánh với cái số 18 này, 20 lớn hơn 18 nó sẽ trả vời giá trị true của chúng ta nếu giá trị đúng thì ta sẽ thực thi cái đoạn lệnh này và nếu giá trị sai thì nó sẽ thực thi đoạn lệnh bên dưới. Giả sử bây giờ chúng ta sẽ sửa lại cái age này là bằng 10 thì rõ ràng khi chúng ta chạy chương trình nó sẽ xuất ra chúng ta đó là bạn chưa đủ tuổi. Thì đây chính là cái câu lệnh cơ bản nhất trong cái phần rẽ nhánh if-else.
Mở rộng câu lệnh if-else thì chúng ta sẽ có một cái câu lệnh khác. If-elif và Elif-if (if-elif-else)
Chúng ta sẽ tạo một cái file mới, tắt cái file này đi và tạo một cái file mới ifelse2.py. Nếu như trong trường hợp if-else chúng ta chỉ có một điều kiện mà thôi thì trong câu lệnh mở rộng chúng ta có thể có nhiều điều kiện hơn, ví dụ như là điều kiện 1, điều kiện 2, điều kiện 3, v.v. Đây chúng ta sẽ có if, là chúng ta sẽ thực hiện ví dụ luôn. 
Tạo một cái điều kiện giả sử chúng ta sử dụng là cái biến age đi age mà lớn hơn 18 là như thế này rồi chúng ta sẽ để trong dấu ngoặc đi thì chúng ta sẽ in ra, print. Bạn đã trưởng thành, ví dụ như vậy. Trường hợp khác thay vì chúng ta kết thúc bằng câu lệnh else thì chúng ta có thể sử dụng câu lệnh là lf. El-if. Với cái El-if này chúng ta hoàn toàn có thể đưa thêm những điều kiện khác vào. Rồi giả sử đây chúng ta đưa thêm age lớn hơn 15 tuổi thì chúng ta sẽ in ra, print, bạn là thiếu niên. Và tương tự như vậy chúng ta có thêm elif để tạo thêm một cái điều kiện khác ví dụ age lớn hơn 6 đi, thì chúng ta có thể in ra, print, bạn là thiếu nhi chẳng hạn. Và cuối cùng để kết thúc cái if-elif này thì chúng ta sẽ có câu lệnh else tương tự. Có nghĩa là nếu như tất cả những điều kiện ở bên trên mà không thỏa thì nó sẽ chạy cái đoạn lệnh ở bên phần else này. Rồi ví dụ đây, print, đây chúng ta in ra bạn là trẻ em chẳng hạn. Rồi trước đó thì đương nhiên chúng ta phải gán cái lệnh age này, trước đó thì đương nhiên chúng ta phải gán cái biến age này cho một cái con số nào đó để thể hiện cái tuổi ví dụ đây chúng ta gán cho 20, thì rõ ràng là 20 thì nó sẽ thỏa cái câu lệnh đầu tiên nó sẽ thực hiện cái đoạn lệnh ở trong cái điều kiện age lớn hơn 18, nếu chúng ta sửa lại thành 16 thì nó sẽ thỏa cái điều kiện thứ 2 và nó sẽ in ra cái này. Đây chúng ta có thể thử ngay trên cái cmd. Python ifelse2.py, thì đây chúng ta hãy xuất ra là bạn là thiếu niên. Giả sử trong trường hợp chúng ta sử dụng một cái biến nào đó mà không được khai báo trước thì nó sẽ phát sinh ra lỗi. Ví dụ đây khi chúng ta không khai báo trước age là bằng một con số nào đó mà chúng ta sử dụng luôn lấy cái a này đi so sánh thì nó sẽ phát sinh lỗi với chúng ta. Là chúng ta thấy đây là một cái lỗi cơ bản và rất nhiều bạn gặp phải. Thì đây chúng ta thấy là nó báo lỗi là cái age is not defined, có nghĩa là biến age chưa được định nghĩa. Như vậy thì khi các bạn muốn sử dụng một cái biến nào đó thì chú ý hãy khai báo nó trước. Và đây cũng là một cái bài tập hướng dẫn các bạn về cái if-elif-else.
Sau đây là một số cái ví dụ để các bạn ôn tập và hiểu rõ hơn về câu lệnh if-elif-else. 
Ví dụ đầu tiên: kiểm tra một con số nhập từ bàn phím là chẵn hay lẻ. Có nghĩa ở đây chúng ta sẽ yêu cầu người dùng nhập một con số nguyên và chúng ta sẽ kiểm tra xem là số này là số chẵn hay số lẻ. Rồi tạo một file mới chanle.py. Đầu tiên chúng ta sẽ có number và gán cho input. Ở đây chúng ta sẽ yêu cầu người dùng nhập một con số từ bàn phím như vậy đây chúng ta sẽ gọi là nhập một số nguyên. Và nhớ rằng chúng ta cần một con số do đó ở đây chúng ta sẽ để là int. Để thực hiện kiểm tra thì đương nhiên chúng ta sẽ sử dụng câu lệnh là if. Nếu bạn còn nhớ một cái phép toán có thể giúp kiểm tra chẵn lẻ đó là phép chia lấy phần dư thì đây chúng ta sẽ lấy cái number này chia cho 2 và lấy phần dư nếu như bằng 0 thì đó là số chẵn và nếu khác 0 thì đó là số lẻ. Như vậy đây chúng ta sẽ lấy number chia lấy phần dư thì chúng ta sẽ lấy cái dấu thập phân này thì chúng ta sẽ sử dụng cái dấu phần trăm này 2, ở đây có nghĩa là number chia 2 lấy phần dư và kiểm tra so sánh với số 0. Cái câu lệnh này có nghĩa là lấy cái number chia 2 và lấy phần dư sau đó so sánh xem nó có bằng 0 hay không, nếu đúng thì cái câu X này nó sẽ thực thi cái dòng lệnh bên dưới. Đây chúng ta sẽ in ra print là số chẵn, ta có thể đùm. Chúng ta có thể để number vào đây, để nó hiển thị lên trên màn hình và ngược lại nếu như không đúng, không đúng thì chúng ta không cần phải kiểm tra chúng ta chỉ cần để else ở đây mà thôi. Else 2 chấm và chúng ta sẽ in ra là số lẻ. 
Thì đây là một cái chương trình đơn giản có tương tác với người dùng yêu cầu người dùng nhập vào một số nguyên và chúng ta sẽ kiểm tra xem là chẵn hay lẻ. Bây giờ chúng ta sẽ chạy ở trên cái màn hình của mình. Python chanle.py thì đây chúng ta sẽ nhập vào một số nguyên giả sử nhập số 10 thì nó sẽ xuất ra 10 là số chẵn. Trả lại nếu như chúng ta nhập số 9 thì rõ ràng nó sẽ xuất ra chúng ta 9 là một số lẻ.
Bài tập tiếp theo chúng ta sẽ kiểm tra điểm trung bình và xuất ra xếp loại của học sinh, yêu cầu là nhập vào một điểm trung bình và sau đó chúng ta sẽ từ điểm trung bình đó kiểm tra và xuất ra xếp loại. Nếu như lớn hơn 8 thì xếp loại giỏi, nếu như lớn hơn 6,5 thì loại khá, lớn hơn 5 thì loại trung bình và nhỏ hơn sẽ là loại yếu. Như vậy thì đầu tiên chúng ta sẽ bắt đầu bằng cái việc input một cái điểm trung bình. Đây chúng ta sẽ tạo ra một cái file mới là diem.py và chúng ta thực hiện điểm bằng input ‘hãy nhập điểm trung bình của học sinh’. Các bạn lưu ý rằng trong trường hợp này chúng ta cần là một số thực chứ không phải là một số nguyên, do đó cái hàm int ở đây nó sẽ không hoạt động và chúng ta sẽ sử dụng một cái hàm khác đó là hàm float để biến cái giá trị người dùng nhập vào trở thành số thực. Rồi kiểm tra bằng câu lệnh if, if điểm lớn hơn hoặc bằng 8.0 thì đây chúng ta sẽ in ra. Chú ý rằng sau if là 2 chấm và in ra print: học sinh giỏi. Ở đây do có nhiều điều kiện do đó chúng ta không sử dụng else ngay lúc này mà chúng ta sẽ sử dụng elif để thêm vào một điều kiện tiếp theo. Elif điểm lớn hơn bằng 6.5, rõ ràng khi kiểm tra học sinh khá thì điểm phải nằm trong khoảng từ 6.5 đến gần 8 điểm tuy nhiên thì ở đây chúng ta không cần một cái điều kiện đó là kiểm tra nhỏ hơn 8 điểm, bởi vì sao, bởi vì khi nó đạt được cái elif này thì nó đã kiểm tra cái điểm lớn hơn bằng 8 và nó sai nếu như điểm lớn hơn bằng 8 này sai, có nghĩa là điểm chắc chắn nó đang nhỏ hơn 8 điểm. Và bây giờ chúng ta chỉ cần một cái điều kiện duy nhất đó là điểm lớn hơn bằng 6.5 mà thôi. Như vậy đây khi mà điểm thỏa điều kiện nhỏ hơn bằng 6.5 thì chúng ta sẽ in ra là học sinh khá. Tương tự như vậy chúng ta sẽ có học sinh trung bình elif điểm lớn hơn bằng 5.0 thì chúng ta sẽ in ra, chú ý rằng có dấu 2 chấm. Print: học sinh trung bình. Và cuối cùng do là điều kiện cuối cùng cho nên không cần phải một cái kiểm tra nữa tại đây chúng ta sẽ sử dụng else mà không cần sử dụng elif. Như vậy để chúng ta sẽ in ra print: học sinh yếu. 
Rồi bây giờ chúng ta có thể test cái phần mềm của mình. Ta gọi Python diem.py đây. Nhập vào điểm trung bình của học sinh, giả sử chúng ta nhập 9 thì đây chúng ta sẽ thấy là chương trình của chúng ta xuất ra học sinh giỏi Trả lại với một con số thập phân ví dụ như là 4.5 thì đây chúng ta sẽ thấy xuất ra cái kết quả là học sinh yếu. Chúng ta sẽ thấy là trong trường hợp này chúng ta xuất ra một câu thông báo và ở đây nhập luôn cái điểm như thế này thì nó sẽ không đẹp, do đó thì chúng ta sẽ có thêm là 2 chấm và dấu cách ra để cho hiển thị đẹp hơn.
Bài tập tiếp theo chúng ta sẽ thực hiện kiểm tra xem tam giác nhập vào có phải là tam giác đều hay tam giác cân hay không. 
Bây giờ chúng ta sẽ tạo một file mới là tamgiac.py và chúng ta thực hiện đó là nhập vào 3 cạnh của tam giác. Đương nhiên 3 cạnh tam giác không nhất thiết phải là số nguyên, như vậy thì 3 cạnh tam giác có thể là số thực, vậy đây chúng ta sẽ có a bằng float input nhập cạnh một. Rồi chúng ta sẽ copy cái này thành 3 dòng, nhập cạnh 2 và nhập cạnh 3, ta sẽ sửa lại biến b và biến c. Nhập cạnh số 2, nhập cạnh số 3. Bây giờ chúng ta sẽ thực hiện kiểm tra tam giác đều thì cần 3 cạnh này bằng nhau có nghĩa là a bằng b, a bằng c và b bằng c. Tuy nhiên thì nếu chúng ta kiểm tra thì chúng ta chỉ cần kiểm tra 2 lần đó là a bằng b và a bằng c là đủ không cần phải kiểm tra b bằng c, nếu như cả 2 điều kiện đều thỏa thì đó là tam giác đều. Rồi bây giờ chúng ta sẽ kiểm tra if a bằng b, ở đây chúng ta thấy là chúng ta có một cái điều kiện phức tạp, hay nói khác là trong một cái câu lệnh if chúng ta có nhiều hơn một điều kiện thì như vậy thì chúng ta phải kết hợp nhiều điều kiện khác nhau lại. Ví dụ đây a bằng b và b bằng c thì như vậy chúng ta sẽ cần thêm một cái toán tử, gọi là các toán tử so sánh, gọi là các toán tử luận lý để kết hợp những cái điều kiện lại với nhau, ví dụ trong trường hợp này a bằng b thì chúng ta sẽ thêm vào là and b bằng c. Thì lúc này chúng ta thấy rằng đây là một tam giác đều và đây chúng ta sẽ print: tam giác đều. Rồi trước mắt thì chúng ta sẽ chạy thử trước cái đoạn có này. Bây giờ chúng ta sẽ mở cái cmd và chạy Python tamgiac.py. Giả sử bây giờ chúng ta nhập 5, 5 và 5 thì đây chúng ta sẽ thấy rằng là nó sẽ xuất ra chúng ta, tam giác đều, như vậy thì cái điều kiện chúng ta là chính xác.
Tiếp theo bây giờ chúng ta sẽ kiểm tra tam giác cân, có nghĩa là nó không đều thì nó sẽ có thể rơi vào trường hợp là tam giác cân. Tiếp theo thì chúng ta sẽ đặt tiếp một cái điều kiện thứ 2 là elif. Trong trường hợp này nếu là tam giác cân thì chỉ cần 2 cạnh bằng nhau có nghĩa là ở đây a bằng b hoặc a bằng c hoặc b bằng c là đủ để trở thành một tam giác cân. Như vậy thì ở đây chúng ta sẽ tạo tiếp một cái điều kiện là a bằng b, ở đây không phải là điều kiện và mà là điều kiện or. Như vậy thì chúng ta sẽ sử dụng một cái từ khóa đó là or, tại vì chúng ta đang thể hiện đó là ngoặc a bằng b, ngoặc b bằng c, ngoặc a bằng c. Vậy b bằng c or a bằng c. Thì chúng ta sẽ in ra đó là tam giác cân. Ở đây các bạn chú ý nếu như nó xuống dưới cái điều kiện này thì tức là cái điều kiện bên trên này không thỏa hay nói khác là nó không đều. Tam giác không đều thì chúng ta sẽ kiểm tra ngoặc là a bằng b, hoặc là b bằng c, hoặc là a bằng c thì nó sẽ là tam giác cân, không cần thiết phải kiểm tra thêm cái điều kiện là cạnh còn
lại không bằng bởi vì nếu như xuống tới đây thì đương nhiên là cạnh còn lại không bằng. Ngoài ra nếu như không thỏa cả 2 trường hợp này thì chúng ta có thể xuất ra một cái câu thông báo đó là tam giác này là tam giác thường. Đương nhiên là sẽ có bạn thắc mắc thế tam giác vuông thì làm sao? Tam giác vuông thì chúng ta sẽ sử dụng một cái định lý đó là 2 cạnh góc vuông bình phương cộng lại sẽ bằng cạnh còn lại. Như vậy thì với cái định lý đó chúng ta có thể áp dụng để chúng ta có thể áp dụng để xem xét xem là một tam giác có phải là tam giác vuông hay không, ví dụ như các bạn có thể là a nhân a cộng b nhân b bằng c nhân c. Đương nhiên là có thể cái góc vuông nó rơi vào góc khác, do đó chúng ta phải kiểm tra được 3 cái điều kiện đó là b nhân b cộng c nhân c bằng a nhân a. Và tương tự như vậy đối với góc vuông còn lại. Ở đây thì tôi chỉ kiểm tra tam giác đều và tam giác cân mà thôi. Rồi bây giờ chúng ta sẽ thử xem chúng ta sẽ chạy chương trình Python tamgiac.py rồi chúng ta sẽ nhập 2 cạnh bằng nhau, 5, 5 và 6. Thì đây chúng ta sẽ thấy là xuất ra là tam giác cân nếu chúng ta nhập 5, 5, 5 thì nó là tam giác đều và nếu nhập 4, 5, 6 thì nó là tam giác thường. Đương nhiên nếu như bạn biết rằng tam giác nó sẽ có những cái điều kiện cụ thể thì mới trở thành tam giác được ví dụ như chúng ta nhập 1, 2, 10 thì đương nhiên không phải tam giác thì cái trường hợp đó thì các bạn có thể là tham khảo thêm và và tự mình luyện tập thêm để xem như là một cái bài tập để các bạn mở rộng cái bài tập này, bài tập kiểm tra xem là tam giác là tam giác gì. 
Với 3 bài tập này đó là bài tập chẵn lẻ, bài tập tính điểm và bài tập tam giác thì chúng ta kết thúc cái phần các câu lệnh rẽ nhánh ở đây. Đương nhiên là những bài tập này chỉ là những bài tập cơ bản các bạn hoàn toàn có thể tìm thêm những bài tập khác để luyện tập thêm. Chúng ta sẽ gặp nhau chúng ta sẽ tiếp tục gặp nhau ở phần tiếp theo đó là các câu lệnh lặp.
## Section 5: Vòng lặp
### Subsection 1: Vòng lặp
Nếu như trong câu lệnh if khi điều kiện là đúng thì chúng ta sẽ thực hiện một cái đoạn code nào đó. Tuy nhiên trong câu lệnh if ta chỉ thực hiện đoạn code đó một lần duy nhất. Trong một số trường hợp chúng ta muốn thực hiện cái đoạn code đó nhiều lần lặp đi lặp lại thì chúng ta sẽ có một cái khái niệm tiếp theo đó là khái niệm vòng lặp. Và cái phần đầu tiên ở đây tôi sẽ giới thiệu cho các bạn về 2 cái loại vòng lặp cơ bản nhất đó là vòng lặp for và vòng lặp while.
Vòng lặp for thì ở đây, giả sử chúng ta tạo một cái file mới là loop.py để giới thiệu về cấu trúc của 2 cái loại vòng lặp này. 
Đầu tiên là vòng lặp for. Vòng lặp for chúng ta sẽ có for một cái biến nào đó, ví dụ như là a và một cái từ khóa là in và sau đó đến một cái gọi là iterable hay nói khác đó là một cái khối để lập. Ví dụ chúng ta có một cái mảng ar là bằng 1, 2, 3 thì ở đây chúng ta có thể sử dụng for a in ar, có nghĩa là cái biến a này được lặp qua các phần tử của mảng ar. Đây chúng ta cũng tương tự như if chúng ta để 2 chấm và thực thi một cái lệnh nào đó ở đây. Chú ý rằng cái lệnh trong đây được thực thi nhiều lần chứ không phải một lần như trong câu lệnh if. Ví dụ đây chúng ta print a và chúng ta có thể thấy được ngay trên cái kết quả của mình. 
Python loop.py thì đây chúng ta sẽ thấy là nó xuất ra chúng ta giá trị 1, 2 và 3 hay nói cách khác trong trường hợp này biến a chạy qua từng phần tử của một cái tập hợp. Chính xác hơn là các phần tử của một cái dãy a lấy từng phần tử này đưa vào trong cái lệnh print và in ra màn hình. Đây là cái cấu trúc chung nhất của một cái lệnh lặp. 
Về cái câu lệnh while đây tôi cũng sẽ có cú pháp cho cái lệnh while thì chúng ta sẽ có while, bên trong này sẽ là 1 cái điều kiện 2 chấm và sau đó chúng ta thực hiện một số cái câu lệnh ở đây. Các bạn sẽ nhìn thấy cái while này tương tự như câu lệnh if, tuy nhiên điều kiện này, tuy nhiên câu lệnh while này khá đặc biệt nếu như câu lệnh if chỉ thực hiện cái đoạn code này một lần thì câu lệnh while này sẽ thực hiện đoạn code này lặp đi lặp lại cho đến khi nào điều kiện không còn đúng nữa. Như vậy ở đây giả sử chúng ta cho một cái giá trị i là bằng không và chúng ta sẽ kiểm tra i nhỏ hơn bằng 10 có nghĩa là khi i còn nhỏ hơn bằng 10 thì đoạn code này sẽ còn chạy, và đây chúng ta sẽ in ra i, đây chúng ta sẽ thực hiện print cái biến i và sau khi in xong chúng ta sẽ cho i gán cho i cộng một có nghĩa là tăng cái i này lên 1. Rồi giờ chúng ta sẽ print ra ngay chỗ này một cái đường gạch để chia 2 cái phần. 
Chạy chương trình này. Đây là cái phần của for 1 2 3, phần bên dưới này chúng ta sẽ thấy là nó sẽ xuất ra những con số từ 0 đến 10. Ban đầu biến i này được cho giá trị là 0, sau đó i này được kiểm tra với con số 10, nếu như i này nhỏ hơn 10 có nghĩa là cái điều kiện này đúng thì nó sẽ thực thi là in ra i và sau đó tăng i lên một. Khi mà i tăng lên 1 có nghĩa là i bằng 1 thì nó sẽ tiếp tục quay lại đây nó sẽ kiểm tra i so với số 10 và nếu i này tiếp tục nhỏ hơn 10 có nghĩa là lúc nó bằng 1 thì nó vẫn tiếp tục nhỏ hơn thì nó sẽ thực hiện in i ra. Khi mà chúng ta sẽ thấy trên màn hình là số 1 ở đây, tương tự như vậy đối với số 2 số 3 số 4 và đến cuối cùng nó sẽ đến số 10. Sau khi thực hiện in print i bằng 10 sau đó i được tăng lên 1 thì i bằng 11, quay lại đây kiểm tra thì chúng ta sẽ thấy rằng là 11 nó sẽ lớn hơn 10 và cái điều kiện này không còn đúng nữa do đó cái phần code bên dưới không còn được thực thi và nó sẽ thoát ra khỏi vòng lặp. Thì đây chính là cái cấu trúc cơ bản của vòng lặp for và while.
Câu lệnh for chúng ta sử dụng in trong một cái dãy nào đó tuy nhiên thì ngoài cái cách đó chúng ta có thể kết hợp với một hàm range để thực hiện câu lệnh for nó tốt hơn. Khi chúng ta biết được chắc chắn số vòng lặp thì chúng ta thông thường kết hợp for với hàm range. 
Đây tôi có thể minh họa các bạn ngay, đây chúng ta sẽ tạo ra range.py. 
For i in range, trong hàm range này chúng ta sẽ cần 3 thông số: thứ nhất là con số bắt đầu, thứ 2 là con số kết thúc và thứ 3 đó là step có nghĩa là cái con số cộng cho con số bắt đầu. Giả sử chúng ta đưa vào đây các thông số là 1 và 10, tạm thời chúng ta bỏ qua cái step này nếu như step bằng 1 và chúng ta thực hiện in ra i. Ở đây chúng ta không cần thiết phải tăng i lên giống như trong vòng lặp while, bởi vì cái range này nó sẽ tự động tăng i lên cho chúng ta. Bây giờ chúng ta sẽ chạy thử, range.py chúng ta sẽ thấy là nó in ra các con số từ 1 đến 9 thì các bạn chú ý rằng cái hàm gen này trả về chúng ta một dãy từ con số bắt đầu đến con số kết thúc tuy nhiên không bao gồm con số kết thúc, hay nói khác là trong trường hợp này nó chỉ in ra từ 1 đến 9 mà không bao gồm số 10 mặc dù chúng ta để ở đây là 1, 10. Trong trường hợp cái step hay cái bước nhảy khác 1 thì chúng ta phải đưa vào đây một cách tường minh ví dụ là 2. Thì đây chúng ta sẽ chạy lại chúng ta sẽ thấy rằng, nó sẽ in ra chúng ta là 1, 3, 5, 7 và 9 có nghĩa là cái step này nó sẽ quyết định i nó tăng lên một lần bao nhiêu đơn vị. Rồi trong trường hợp bằng 1 thì chúng ta có thể bỏ cái này đi. Trong trường hợp cái con số bắt đầu là bằng 1 thì chúng ta hoàn toàn có thể là bỏ con số bắt đầu đi, đây giả sử chúng ta để ở đây là range 10 thì chúng ta sẽ thấy kết quả nó tương tự như đầu tiên nó in ra chúng ta từ 1 đến 9.
Bài tập đầu tiên của chúng ta đó là đếm số phần tử trong một dãy. Giả sử chúng ta có được một dãy cho trước và chúng ta sẽ đếm xem là trong dãy có bao nhiêu phần tử. Rồi bây giờ tôi sẽ tạo ra một cái file mới đó là countlist.py. Giả sử chúng ta có một cái dãy ví dụ như là dãy 1, 2, 3, 4, 5, 6, như vậy thì dãy này có 6 phần tử và chúng ta sẽ sử dụng vòng lặp for để đếm xem dãy này có bao nhiêu phần tử. Trước khi mà chúng ta chạy vòng lặp for thì chúng ta sẽ cần một cái biến đếm, ví dụ đầu tiên ta sử dụng một cái biến đếm là count là 0. Biến đếm này có nhiệm vụ là khi gặp một phần tử thì biến đếm sẽ tăng lên 1 và cuối cùng chúng ta sẽ xuất ra thông tin biến đếm này để biết được rằng là dãy chúng ta có bao nhiêu phần tử. For a in dãy, có nghĩa là ở đây biến a nó sẽ được lặp qua các phần tử của dãy. Và ở đây khi a này gặp một phần tử thì thay vì chúng ta in ra a chúng ta sẽ tăng biến đếm lên, đây ta sử dụng là một count cộng bằng một có nghĩa là tăng biến đếm lên 1 đơn vị. Khi lập qua tất cả các phần tử thì cái count này nó sẽ được tăng lên đúng cái số lần là số phần tử, và khi đó chúng ta có thể in ra số phần tử của cái dãy này. Số phần tử của dãy ở đây ta sẽ đưa vào là count. Rồi chạy thử, countlist.py trên đây chúng ta thấy là số phần tử của dãy là 6. Đây là một cái ví dụ minh họa đầu tiên cho thấy là chúng ta có thể sử dụng vòng lặp for kết hợp với một dãy để thực hiện chạy qua các phần tử của dãy. Các bạn lưu ý rằng nếu các bạn học sâu về dãy thì chúng ta hoàn toàn có một cái hàm để đếm ngay số phần tử của dãy, đó là hàm count tuy nhiên ở đây thì chúng ta viết một cái đoạn code như thế này để minh họa là để minh họa vòng lặp for.
Ngoài cái cách mà chúng ta sử dụng một cái dãy để mà một cái phần tử nào đó lặp qua cái dãy đó chúng ta hoàn toàn có thể sử dụng một cái chuỗi thay thế cho cái dãy. 
Bây giờ tôi sẽ minh họa cho các bạn một cái bài tập tiếp theo đó là đếm số ký tự trong một cái chuỗi. 
Bây giờ chúng ta sẽ tiếp tục một cái file mới đó là count-string.py. Thay vì chúng ta cho trước một chuỗi thì bây giờ chúng ta sẽ yêu cầu người dùng nhập vào, bằng cách là chuỗi bằng input hãy nhập vào một chuỗi bất kỳ. For a in chuỗi, ở đây thay vì chúng ta sử dụng dãy thì chúng ta đưa vào một chuỗi có nghĩa là cái biến a này nó sẽ lập qua các phần tử của chuỗi hay nó khác là lập qua từng ký tự bên trong chuỗi. Thì đây chúng ta hoàn toàn có thể in ra cái a này và thực hiện một cái logic tương tự chúng ta có thể tạo ra một biến count, mỗi lần gặp một ký tự của chuỗi thì chúng ta sẽ tăng cái count này lên 1 để có thể đếm được số phần tử của chuỗi hay nói cách khác là chuỗi này có bao nhiêu ký tự. Và cuối cùng ở đây chúng ta có thể in ra chuỗi này, số ký tự của chuỗi là count. Rồi bây giờ chúng ta sẽ chạy thử cái này Python count-string.py, ở đây yêu cầu là nhập vào một chuỗi ví dụ như nhập vào một chuỗi là hello, vòng lặp nó sẽ xuất ra là chữ h nè, chữ e nè, chữ 2 chữ l và chữ o, hay nó khác là cái a này nó lặp qua tất cả các phần tử của cái chuỗi này. Nó sẽ lấy các ký tự của chuỗi này và nó in ra và mỗi lần in ra thì nó làm thêm 1 cái lệnh nữa đó là tăng cái count này lên 1 và cuối cùng nó sẽ xuất ra số ký tự của chuỗi đó là cái biến count này, và đây số ký tự của chuỗi là 5. Như vậy thì tôi đã minh họa cho các bạn 2 cái bài tập đó là sử dụng đó là sử dụng vòng lặp for kết hợp với một dãy hoặc là một chuỗi để thực hiện chạy qua các phần tử của dãy hay là chuỗi đó. Các bạn có thể tìm thêm những bài tập ở trong đường link đính kèm và xem như là những cái bài tập để chúng ta rèn luyện thêm, hoàn thiện thêm những kỹ năng sử dụng cái vòng lặp for của mình.
Trong khi thực hiện các câu lệnh lặp thì có 2 cái lệnh mà chúng ta cần phải quan tâm đó là break và continue. 
Lệnh break sẽ dừng ngay các câu lệnh lặp và lệnh continue sẽ tiếp tục câu lệnh lặp ở cái vòng lặp tiếp theo. Bây giờ tôi sẽ minh họa cho các bạn về 2 câu lệnh đặc biệt này. 
Bây giờ chúng ta sẽ tạo một cái file mới break-continue.py. Trước hết là câu lệnh break câu lệnh break sẽ dừng ngay câu lệnh lặp, bất kể là câu lệnh for hay câu lệnh while. Giả sử chúng ta có một cái biến for i in range 1 đến 10. Thì chúng ta biết là cái câu lệnh này i sẽ được chạy từ 1 đến 9 đến 9 nó sẽ dừng, bây giờ chúng ta sẽ in ra print i tuy nhiên ở đây chúng ta sẽ thực hiện thêm một cái kiểm tra if i bằng 5 thì chúng ta sẽ thực hiện break, có nghĩa là khi i bằng 5 chúng ta sẽ dừng vòng lặp mà không cần mà không cần chờ i chạy đến 9. Bây giờ chúng ta sẽ thử xem, Python break-continue thì đây chúng ta sẽ thấy là kết quả nó chạy i từ 1 đến 5, 1 2 3 4 5, có nghĩa là sau khi nó print i và i bằng 5 thì đây nó thực hiện một câu lệnh break, câu lệnh break này sẽ lập tức hủy cái vòng lặp gần nhất của nó và thoát ra ngoài, bất kể là đang trong vòng lặp này. 
Rồi tiếp theo chúng ta sẽ có câu lệnh là continue. Bây giờ thay vì cái để print như thế này thì chúng ta sẽ đưa cái print này đằng sau cái câu lệnh if. Ở đây chúng ta sẽ đổi cái break này thành continue để xem là cái giá trị nó hiển thị ra màn hình nó như thế nào. Đây chúng ta sẽ chạy lại Python break-continue.py. Chú ý nè ở đây chúng ta có 1, 2, 3, 4, 6, 7, 8, 9 và rõ ràng thiếu đi số 5. Thì ở đây chúng ta sẽ phân tích lại cái câu lệnh continue ở đây, for i in range 1 đến 10 có nghĩa là i nó sẽ chạy từ 1 đến 9. Khi i bằng 1, kiểm tra cái i bằng 5 nó không đúng thì nó sẽ in i ra như bình thường nếu như bằng 2 tương tự như vậy, 3 tương tự như vậy, đến i bằng 5 thì nó sẽ có vấn đề. Khi i bằng 5 thì cái if này là đúng do đó nó sẽ thực hiện lệnh continue, lệnh continue là lệnh sẽ tiếp tục vòng lặp tiếp theo các bạn lưu ý điều đó nó sẽ tiếp tục vòng lặp tiếp theo mà bỏ qua tất cả những câu lệnh ở bên dưới của vòng lặp đó. Ví dụ như i bằng 5 nó sẽ thực hiện continue có nghĩa là nó sẽ quay lại vòng lặp for và nó sẽ chạy tiếp với i bằng 6 mà nó bỏ qua cái lệnh print y này, do đó khi cái kết quả hiển thị ra ở đây chúng ta thấy rằng là không có số 5 hiển thị trên màn hình chúng ta. Như vậy thì trong cái phần này là tôi giới thiệu cho các bạn về 2 cái câu lệnh đặc biệt đó là break và continue. Thay vì chúng ta thực hiện for và while như bình thường chúng ta có thể kết hợp với break và continue để thực hiện những cái logic nó cao cấp hơn đối với các vòng lặp.
Chúng ta đã có những cái công thức liên quan đến for và while, thì bây giờ chúng ta sẽ làm một số bài tập liên quan đến vòng lặp while.
Bài tập đầu tiên chúng ta sẽ thiết kế một cái trò chơi đơn giản đó là trò chơi đoán số. Đầu tiên hệ thống sẽ sử dụng một cái hàm random tức là tạo ra một con số ngẫu nhiên và yêu cầu người dùng phải nhập vào những con số để đoán nếu người dùng nhập vào con số lớn hơn thì hệ thống sẽ xuất ra là lớn hơn rồi hay gì đó để nhắc người dùng là con số nhập vào nó lớn hơn con số quy định, nếu như nhỏ hơn thì chúng ta sẽ xuất ra tương tự và trong và cuối cùng là nếu như người dùng đoán đúng con số mà hệ thống xuất ra ngẫu nhiên thì nó sẽ báo hiện thì hệ thống sẽ thông báo là bạn đã thắng rồi hay gì đó. Rồi bây giờ chúng ta sẽ thiết kế một cái trò chơi đơn giản với vòng lặp while. 
Bây giờ chúng ta sẽ tạo một cái file mới là doanso.py. Do ở đây hệ thống sử dụng một cái hàm là ngẫu nhiên hàm random do đó thì chúng ta phải import cái gói random này. Trong Python thì chúng ta sẽ có rất nhiều cái gói bên ngoài và chúng ta sẽ sử dụng một cái từ khóa là import để thực hiện là đưa gói này vào trong cái code của mình. Rồi ở đây chúng ta sẽ import random. Ta sẽ gán cho một cái con số thì đây là con số do hệ thống phát sinh, number bằng random chấm randint, ta sẽ gọi một hàm randint để phát sinh một con số ngẫu nhiên và đương nhiên là mình sẽ được quy định số nhỏ nhất và số lớn nhất , đó là cái ngưỡng nhỏ nhất và ngưỡng lớn nhất. Ở đây chúng ta sẽ đưa vào là 1,100 có nghĩa là hệ thống sẽ giúp chúng ta phát sinh một con số ngẫu nhiên từ 1 đến 100. Rồi bây giờ tiếp theo chúng ta sẽ thiết kế làm sao để người dùng có thể nhập vào những con số để dự đoán. While True, ở đây chúng ta sử dụng một câu lệnh là while True. Các bạn nhớ rằng while sau đó đến điều kiện nếu điều kiện đúng thì câu lệnh phía dưới được thực thi. While True có nghĩa là điều kiện này luôn luôn đúng hay nói cách khác là câu lệnh bên dưới luôn luôn được thực thi. Hay nói cách khác điều này cũng có nghĩa rằng là while này nó sẽ là vô hạn. Rồi bây giờ bên dưới chúng ta sẽ thực hiện đoán. Guess đi, chúng ta sẽ đặt một cái biến tên là guess và ở đây sử dụng một hàm int bên trong, sẽ có một cái hàm input như chúng ta đã làm trong cái phần trước. Hãy nhập vào một con số. Ta ghi là Hãy đoán một con số đi, gợi ý thêm là từ 1 đến 100 thôi. Sau dòng này thì người dùng sẽ phải nhập vào một con số và chúng ta sẽ lưu vào trong cái biến guess này. Bây giờ chúng ta sẽ kiểm tra if, nếu cái biến guess này nó nhỏ hơn cái biến number, biến number là cái biến của hệ thống phát sinh các bạn nhớ điều đó. Thì bây giờ chúng ta sẽ in ra một câu nhắc nhở người dùng, Số bạn nhập quá nhỏ, hãy nhập lại. Trường hợp tiếp theo chúng ta sẽ sử dụng elif guess lớn hơn number, có nghĩa là vẫn chưa đúng nhưng mà nhập lớn hơn thì bây giờ chúng ta sẽ in ra print Số bạn nhập quá lớn, hãy nhập lại. Trường hợp tốt nhất đó là người dùng đoán đúng, như vậy đây chúng ta sẽ để là else 2 chấm và ở đây in ra một câu thông báo, print bạn đã đoán đúng, chúc mừng đi, Chúc mừng bạn đã đoán đúng. Và các bạn nhớ rằng ngay chỗ này chúng ta cần phải có một câu lệnh đó là câu lệnh break để hủy đi cái câu lệnh while, thoát ra khỏi câu lệnh while, đây chúng ta sẽ để là câu lệnh break ở đây. Nếu các bạn không để như thế này thì vòng lặp nó vẫn tiếp tục bạn lưu ý điều đó bởi vì chúng ta để là while True như vậy thì vòng lặp while này nó sẽ lặp vô hạn, do đó khi mà người dùng nó đúng thì chúng ta sẽ để ở đây một câu lệnh break.
Rồi bây giờ chúng ta sẽ chạy thử cái chương trình này. Python doanso.py. Rồi cho đến đây thì hệ thống đã tự phát sinh ra một con số, như vậy thì ở đây nó hiển thị ra là hãy đoán một con số, giả sử là tôi đoán là 50, Bạn nhập quá nhỏ, nhỏ có nghĩa là con số mà hệ thống phát sinh nó lớn hơn con số này, bây giờ chúng ta sẽ nhập một con số khác ví dụ như là 70. Thì bây giờ vẫn quá nhỏ nhập tiếp 80 và cuối cùng là nó xuất ra Bạn đã đoán đúng. Như vậy thì hệ thống random ngẫu nhiên ra một con số là 80 và sau 3 lần đoán ở đây chúng ta đã đoán đúng cái con số mà hệ thống phát sinh. Thì đây là một cái bài tập và chúng ta thấy là thay vì sử dụng đến một cái điều kiện nào đó chúng ta đưa vào trong đây chữ True để cho cái vòng lặp while này nó lặp mãi mãi và đương nhiên nếu như lặp mãi mãi là không được, do đó thì chúng ta phải có một cách nào đó để thoát ra khỏi vòng lặp và cách đó là sử dụng lệnh break.
Rồi tiếp theo thì chúng ta sẽ có một cái bài tập nữa một bài tập đơn giản thôi đó là kiểm tra một số nhập vào có phải là số nguyên tố hay không. Nếu như các bạn không nhớ cái số nguyên tố là gì, thì ở đây tôi sẽ nhắc lại cho các bạn số nguyên tố đó là số chỉ có thể chia hết cho 1 và chính nó, có nghĩa là trên đường đi của nó sẽ không chia hết cho bất kỳ con số nào khác chỉ là 1 và chính nó mà thôi thì nó gọi là số nguyên tố. Rồi bây giờ chúng ta sẽ tạo một cái file mới là prime.py, chữ prime này là chữ tiếng Anh của số nguyên tố. Đương nhiên đầu tiên thì chúng ta sẽ yêu cầu người dùng nhập vào một con số và vô đây, number bằng int input, Hãy nhập vào một số số nguyên, rồi ở đây chúng ta sẽ yêu cầu người dùng nhập vào một số nguyên mà không phải nhập vào số thực. Để kiểm tra một số nguyên tố thì đầu tiên chúng ta sẽ có một cái hàm, chúng ta ghi là hàm prime đi là bằng False. Ban đầu thì chúng ta sẽ cho nó là True đi, giả sử là con số đầu tiên là chúng ta sẽ cho nó là True và số bắt đầu chúng ta sẽ cho nó là 2. Cách logic của bài toán này như sau: đầu tiên chúng ta sẽ cho một con số là 2 kiểm tra thử con số nhập vào có chia hết cho 2 hay không nếu như chia hết thì đương nhiên không phải số nguyên tố, sau đó chúng ta sẽ tăng cái số chạy này lên 2 tiếp tục lên 3 chia dần lên tức là sau đó 3 chúng ta lại tiếp tục kiểm tra xem là con số của mình có chia hết cho 3 hay không nếu chia hết thì không phải số nguyên tố thoát ra tăng lên 1 nữa và chúng ta sẽ tăng dần lên đến khi mà gặp được đúng con số đó thì chúng ta sẽ dừng một lần. Rồi như vậy thì nó bằng 2 thì ở đây chúng ta sẽ có thể sử dụng for có thể sử dụng while tuy nhiên thì trong phần này thì tôi sẽ minh họa các bạn bằng cái vòng lặp while. While i nhỏ hơn number, có nghĩa là chúng ta chỉ xét những con số i nhỏ hơn number mà thôi nó bằng thì không còn gì để nói nữa, bằng đương nhiên là chia hết. Nếu nếu như trong cái quá trình chạy của cái biến i này có một con số nào đó của i mà cái number này chia hết cho i thì lập tức chúng ta biết nó không phải là số nguyên tố và chúng ta sẽ dùng break để chúng ta thoát ra. Vậy đây nếu như number chia cho i lấy phần dư mà bằng 0 hay nó khác là nếu number chia hết cho i thì chúng ta sẽ cho cái miếng prime này là false và break có nghĩa là thoát ra ngay bên ngoài không kiểm tra nữa nếu như gặp một trường hợp nào đó mà number chia hết cho i thì chúng ta biết rằng number không phải xuống nguyên tố và chúng ta thoát ra ngay bên ngoài. Nếu như không chia hết thì y này đương nhiên sẽ tăng lên 1 để kiểm tra cái i tiếp theo tức là i bằng 2 tăng lên 1 sẽ bằng 3, tăng lên 1 sẽ bằng 4, v.v. Bên ngoài vòng lặp while thì chúng ta sẽ điều kiện bên ngoài vòng lặp while thì chúng ta sẽ bắt đầu kiểm tra nếu như cái biến prime của mình nó vẫn là True sau khi mà nó chạy hết vòng lặp này thì nó là một số nguyên tố, bởi vì nó chạy hết mà nó không đụng một trường hợp nào chia hết cả thì ở đây chúng ta xác định ra cái number là số nguyên tố. Như vậy thì nếu prime bằng True, anh ta có thể là không cần ghi bằng True ta để là if prime như thế này thì chúng ta sẽ in ra prime là số nguyên tố. Và trường hợp khác else thì chúng ta sẽ in ra print ở đây là print chứ không phải là prime, Không phải số nguyên tố. Rồi bây giờ chúng ta sẽ kiểm tra thử xem là cái chương trình của mình nó chạy đúng hay không. Python prime.py, nhập vào một số nguyên, cho nên nhập một con số nhỏ nhỏ để dễ biết ví dụ số 5, thì đây nó sẽ báo rằng là số năm là một số nguyên tố như vậy chính xác. Rồi chạy lại giả sử là số 6 đi, số 6 rõ ràng không phải số nguyên tố bởi vì nó chia hết cho 2 và chia hết cho 3 như vậy đây thì nó sẽ báo là không phải số nguyên tố., nên nó khác là cái logic của chương trình của mình đã đúng đắn. 
Ngoài 2 cái chương trình mà tôi minh họa ở đây thì trong cái phần kèm theo chúng ta có thể thấy được là còn một số cái chương trình khác một số bài tập khác các bạn có thể tham khảo và có thể sử dụng đó để luyện tập thêm. Cái việc luyện tập liên tục sẽ giúp các bạn cải thiện cái kỹ năng lập trình của mình và và chúc các bạn nhanh chóng nắm giữ những cái vấn đề liên quan đến vòng lặp và chúc các bạn nhanh chóng nắm vững các vấn đề liên quan đến vòng lặp.
## Section 6: Phần thực hành
### Subsection 1: Phần thực hành
Sau khi tất cả những cái phần nội dung liên quan đến lý thuyết và những cái bài tập nhỏ thì bây giờ chúng ta sẽ đến với một phần tiếp theo đó là cái phần bài tập tổng kết. Trong cái phần này thì tôi có trong phần này thì tôi có đưa cho các bạn 4 cái bài tập và ở đây tôi sẽ giải trước 2 bài tập và sau đó hướng dẫn các bạn 2 bài tập tiếp theo.
Bài tập đầu tiên đó là bài tập đếm số chữ cái và chữ số trong một chuỗi. Chúng ta sẽ yêu cầu người dùng nhập vào một chuỗi và sau đó chúng ta sẽ sử dụng vòng lặp để duyệt qua từng ký tự trong chuỗi và đếm xem trong chuỗi đó có bao nhiêu chữ cái và bao nhiêu chữ số. 
Rồi bây giờ chúng ta sẽ làm ngay cái bài tập đó, đây thì à tôi đã lập bt1.py. Đầu tiên là sẽ cần input để người dùng nhập vào một chuỗi, như vậy đây chúng ta sẽ có một cái biến str input Hãy nhập vào một chuỗi. Để đếm thì chúng ta sẽ sử dụng các biến count như vậy ở đây chúng ta phải đếm 2 cái: 1 cái là số lượng chữ số và cái 2 là số lượng chữ cái, như vậy chúng ta sẽ cần 2 biến count đây. Count, chữ số ghi đếm chữ số đi bằng 0 và đếm chữ cái bằng 0. Theo cái logic của bài toán thì chúng ta sẽ sử dụng vòng lặp for để lặp qua từng ký tự của chuỗi như vậy đây, for c in str, câu lệnh for này thì chúng ta đã được học trong những phần học trước và nếu như c là một chữ số thì chúng ta sẽ tăng cái biến đếm chữ số lên và nếu c là một chữ cái thì chúng ta sẽ tăng cái biến đếm chữ cái lên. Thì ở đây chúng ta có một cái hàm để kiểm tra xem một ký tự có phải là chữ số hay không đó là hàm isalpha và tương tự chúng ta sẽ có một cái hàm để kiểm tra xem nó phải là chữ số hay không đó là isdigit . Rồi chúng ta sẽ sử dụng if kết hợp với hàm isalpha và isdigit để kiểm tra chữ cái hay là chữ số. If c chấm isalpha, chú ý đây là hàm do đó chúng ta sẽ cần mở ngoặc và đóng ngoặc, mặc dù là bên trong này không có gì thì chúng ta vẫn phải mở ngoặc và đóng ngoặc, rồi 2 chấm. Để bắt đầu câu lệnh tiếp. Count, ở đây chúng ta sử dụng là đếm, đếm chữ cái cộng bằng 1 có nghĩa là nếu ký tự c là một chữ cái thì chúng ta sẽ tăng cái biến đếm chữ cái lên 1. Điều kiện tiếp theo là elif c chấm isdigit mở ngoặc đóng ngoặc, chú ý là phải mở ngoặc đóng ngoặc. Và nếu c là một chữ số thì chúng ta sẽ tăng cái biến đếm chữ số lên 1, đây đếm chữ số cộng bằng 1. Đúng ra trong trường hợp này chúng ta sẽ có if, elif và cuối cùng là else, tuy nhiên ở đây if và elif là đã đầy đủ những nội dung cần thiết trong cái logic này, do đó chúng ta sẽ không cần câu lệnh else trong trường hợp này. Rồi kết thúc câu lệnh if và kết thúc luôn câu lệnh for ra bên ngoài chúng ta có thể in ra số lượng chữ cái và số lượng chữ số, print số lượng chữ cái có trong chuỗi 2 chấm và chúng ta sẽ phẩy đưa vào cái biến đếm chữ cái, tương tự như vậy thì chúng ta sẽ có là số lượng chữ số có trong chuỗi và chúng ta sẽ đưa vào cái biến thứ 2 đó là đếm chữ số. Rồi đây là một cái bài tập kết hợp giữa vòng lặp for và if và chúng ta sẽ chạy thử cái chương trình của chúng mình. Python bt1.py. Nhập vào một chuỗi, giả sử bây giờ chúng ta sẽ nhập một cái chuỗi nào đó mà có chữ cái và chữ số abc12345, thì như vậy ở đây chúng ta sẽ có 3 chữ cái và 5 chữ số. Thì đây chúng ta thấy chương trình đã xuất ra chính xác số lượng chữ cái có trong chuỗi là 3 và số lượng chữ số có trong chuỗi là 5.Sau khi tất cả những cái phần nội dung liên quan đến lý thuyết và những cái bài tập nhỏ thì bây giờ chúng ta sẽ đến với một phần tiếp theo đó là cái phần bài tập tổng kết. Trong cái phần này thì tôi có trong phần này thì tôi có đưa cho các bạn 4 cái bài tập và ở đây tôi sẽ giải trước 2 bài tập và sau đó hướng dẫn các bạn 2 bài tập tiếp theo.
Bài tập đầu tiên đó là bài tập đếm số chữ cái và chữ số trong một chuỗi. Chúng ta sẽ yêu cầu người dùng nhập vào một chuỗi và sau đó chúng ta sẽ sử dụng vòng lặp để duyệt qua từng ký tự trong chuỗi và đếm xem trong chuỗi đó có bao nhiêu chữ cái và bao nhiêu chữ số. 
Rồi bây giờ chúng ta sẽ làm ngay cái bài tập đó, đây thì à tôi đã lập bt1.py. Đầu tiên là sẽ cần input để người dùng nhập vào một chuỗi, như vậy đây chúng ta sẽ có một cái biến str input Hãy nhập vào một chuỗi. Để đếm thì chúng ta sẽ sử dụng các biến count như vậy ở đây chúng ta phải đếm 2 cái: 1 cái là số lượng chữ số và cái 2 là số lượng chữ cái, như vậy chúng ta sẽ cần 2 biến count đây. Count, chữ số ghi đếm chữ số đi bằng 0 và đếm chữ cái bằng 0. Theo cái logic của bài toán thì chúng ta sẽ sử dụng vòng lặp for để lặp qua từng ký tự của chuỗi như vậy đây, for c in str, câu lệnh for này thì chúng ta đã được học trong những phần học trước và nếu như c là một chữ số thì chúng ta sẽ tăng cái biến đếm chữ số lên và nếu c là một chữ cái thì chúng ta sẽ tăng cái biến đếm chữ cái lên. Thì ở đây chúng ta có một cái hàm để kiểm tra xem một ký tự có phải là chữ số hay không đó là hàm isalpha và tương tự chúng ta sẽ có một cái hàm để kiểm tra xem nó phải là chữ số hay không đó là isdigit . Rồi chúng ta sẽ sử dụng if kết hợp với hàm isalpha và isdigit để kiểm tra chữ cái hay là chữ số. If c chấm isalpha, chú ý đây là hàm do đó chúng ta sẽ cần mở ngoặc và đóng ngoặc, mặc dù là bên trong này không có gì thì chúng ta vẫn phải mở ngoặc và đóng ngoặc, rồi 2 chấm. Để bắt đầu câu lệnh tiếp. Count, ở đây chúng ta sử dụng là đếm, đếm chữ cái cộng bằng 1 có nghĩa là nếu ký tự c là một chữ cái thì chúng ta sẽ tăng cái biến đếm chữ cái lên 1. Điều kiện tiếp theo là elif c chấm isdigit mở ngoặc đóng ngoặc, chú ý là phải mở ngoặc đóng ngoặc. Và nếu c là một chữ số thì chúng ta sẽ tăng cái biến đếm chữ số lên 1, đây đếm chữ số cộng bằng 1. Đúng ra trong trường hợp này chúng ta sẽ có if, elif và cuối cùng là else, tuy nhiên ở đây if và elif là đã đầy đủ những nội dung cần thiết trong cái logic này, do đó chúng ta sẽ không cần câu lệnh else trong trường hợp này. Rồi kết thúc câu lệnh if và kết thúc luôn câu lệnh for ra bên ngoài chúng ta có thể in ra số lượng chữ cái và số lượng chữ số, print số lượng chữ cái có trong chuỗi 2 chấm và chúng ta sẽ phẩy đưa vào cái biến đếm chữ cái, tương tự như vậy thì chúng ta sẽ có là số lượng chữ số có trong chuỗi và chúng ta sẽ đưa vào cái biến thứ 2 đó là đếm chữ số. Rồi đây là một cái bài tập kết hợp giữa vòng lặp for và if và chúng ta sẽ chạy thử cái chương trình của chúng mình. Python bt1.py. Nhập vào một chuỗi, giả sử bây giờ chúng ta sẽ nhập một cái chuỗi nào đó mà có chữ cái và chữ số abc12345, thì như vậy ở đây chúng ta sẽ có 3 chữ cái và 5 chữ số. Thì đây chúng ta thấy chương trình đã xuất ra chính xác số lượng chữ cái có trong chuỗi là 3 và số lượng chữ số có trong chuỗi là 5.
Bài tập thứ 2. Một cái bài tập liên quan đến số nguyên tố. Chúng ta đã có một bài tập kiểm tra số nguyên tố rồi thì bây giờ chúng ta sẽ có một cái bài tập mở rộng hơn chút xíu đó là đếm xem trong một cái khoảng nào đó có bao nhiêu số nguyên tố. Hay nói cách khác là bây giờ chúng ta sẽ yêu cầu người dùng nhập vào một khoản, nhập vào 1 cái số bắt đầu và số kết thúc chúng ta sẽ đếm xem trong khoảng đó có bao nhiêu số nguyên tố. 
Bài tập 2, đây chúng ta sẽ đặt tên là bt2.py. Bài tập về đếm số nguyên tố, thì điểm số nguyên tố đầu tiên chúng ta sẽ yêu cầu người dùng nhập vào a và b int input nhập giá trị bắt đầu, và b tương tự, chúng ta sẽ cho người dùng nhập vào giá trị kết thúc. Rồi để kiểm tra 1 số nguyên tố thì chúng ta đã có chương trình thực hiện điều đó rồi, thì bây giờ cái logic cực kỳ đơn giản thôi chúng ta sẽ cho một cái vòng lặp chạy từ a đến b nếu như gặp phải một số nguyên tố thì chúng ta sẽ tăng biến đếm lên giống như trường hợp chúng ta thực hiện đối với đếm chữ cái và chữ số, tuy nhiên thì cái điều kiện nó khác. Rồi bây giờ chúng ta sẽ có for i in range từ a đến b thì range từ a phẩy b cộng 1, lưu ý điều đó bởi vì hàm range này nó hơi đặc biệt đó là nó sẽ không lấy cái số cuối cùng do đó thì ở đây chúng ta sẽ cộng b lên 1 để chắc rằng nó lấy được con số từ a đến b. Rồi trong hàm for này thì chúng ta sẽ bắt đầu kiểm tra xem i có phải là số nguyên tố hay không nếu i là số nguyên tố thì chúng ta sẽ tăng biến đếm lên 1, như vậy trước cái này chúng ta sẽ có đếm bằng 0 và bên trong này chúng ta sẽ thực hiện kiểm tra số nguyên tố. Để kiểm tra số nguyên tố thì chúng ta có thể mở lại cái bài tập cũ copy cái code đó qua bên đây, đó là cái phần kiểm tra số nguyên tố, đây chúng ta sẽ mở ra cái bài prime.py, đây là cái phần kiểm tra số nguyên tố và chúng ta sẽ copy cái phần này vào trong cái bài tập của chúng ta. Chú ý là phải đưa vào cho đúng cái index của nó tức là nó phải đúng là thụt vào so với cái vòng lặp for ở đây, bởi vì cái này nó được chạy bên trong cái for. Rồi bây giờ chúng ta sẽ thay đổi các biến cho nó phù hợp ở đây là biến i chạy và biến i là cái biến cần kiểm tra. Như vậy ở đây chúng ta không sử dụng i nữa mà chúng ta phải sử dụng cái này là một biến khác ví dụ như chúng ta để là j. Rồi j nhỏ hơn i, ở đây chúng ta không kiểm tra number và chúng ta sẽ kiểm tra là i. Như vậy ở đây là i, i chia cho j bằng 0, lấy phần dư bằng 0 và ở đây là j cộng bằng 1. Rồi như vậy thì chúng ta có một cái đoạn code để kiểm tra số nguyên tố và nếu như là số nguyên tố thì chúng ta sẽ không in ra là số nguyên tố và chúng ta sẽ tăng biến đếm lên một rồi cái đoạn này chúng ta sẽ bỏ đi và chúng ta đổi là đếm cộng bằng 1 có nghĩa là tăng biến đếm lên 1, kết thúc vòng lặp for kết thúc vòng lặp while và kết thúc tất cả những cái if, thì bây giờ chúng ta sẽ in ra cái giá trị cuối cùng. Print số lượng số nguyên tố có trong khoảng cho trước là, đếm. Rồi bây giờ chúng ta sẽ chạy thử cái bài tập 2 này, Python bt2.py, nhập giá trị bắt đầu, giả sử chúng ta nhập số 2 và nhập giá trị kết thúc gia nhập số 10 thì đây số lượng số nguyên tố có trong khoảng cho trước là 4. Như vậy chúng ta sẽ kiểm tra lại bây giờ chúng ta có từ 2 đến 10 thì 2 là một số nguyên tố, 3 là một số nguyên tố, 5 là một số nguyên tố và 7 là một số nguyên tố, như vậy thì từ 2 đến 10 có 4 số nguyên tố hay nói khác là cái logic của chúng ta trong cái bài tập này đã thành công và đã được kết quả mong đợi.
Còn 2 bài tập nữa mà các bạn có thể sử dụng để tham khảo và luyện tập. 
Bài tập thứ nhất đó là tính tổng các số chẵn trong một dãy cho trước. Thì bài tập này tôi có thể hướng dẫn các bạn sơ lược như sau thứ nhất là chúng ta sẽ sử dụng vòng lặp for để chạy qua tất cả những phần tử của cái dãy cho trước và chúng ta thực hiện thêm bằng một câu lệnh if. Nếu làm nếu con số đó là số chẵn thì chúng ta sẽ cộng vào một cái biến nào đó đương nhiên ban đầu cái biến tổng đó chúng ta sẽ cho bằng 0 và nếu gặp một số chẵn thì chúng ta sẽ cộng thêm vào. Và cuối cùng sau một lặp for biến tổng đó là tổng các số chẵn có trong dãy. 
Bài tập thứ tư, tìm số lớn nhất trong dãy, có nghĩa là chúng ta sẽ có một cái dãy cho trước các số nguyên hoặc là các số thực cũng được, chúng ta sẽ tìm xem là số nào là số lớn nhất trong dãy và bài này chúng ta có thể thực hiện đơn giản như sau. Giả sử ban đầu chúng ta sẽ cho số đầu tiên của dãy là số lớn nhất sau đó chúng ta sẽ sử dụng hoặc là for chạy qua các phần tử của dãy, nếu như gặp một con số lớn hơn con số cho trước thì chúng ta sẽ thay đổi cái số lớn nhất đó. Giả sử ban đầu số lớn nhất là số 5, qua con số thứ 2 nó gặp phải số 6 thì số 6 lớn hơn số 5 chúng ta sẽ thay cái số 5 đó bằng số 6. Nếu như gặp một con số nhỏ hơn ví dụ gặp con số thứ 3 là số 4 thì chúng ta không cần thay đổi gì cả và sau khi chạy qua tất cả các phần tử của dãy thì số còn lại trong cái biến của chúng ta đó chính là số lớn nhất của dãy. Với cái hướng dẫn cơ bản này và những cái kiến thức các bạn đã được học trong cái phần if cái phần for và phần while thì hi vọng các bạn có thể giải được 2 bài tập cơ bản như thế này.
Sau khi các bạn hoàn thành những bài tập thì các bạn có thể so sánh kết quả của mình với đáp án mà Onlinica cung cấp.
## Section 7: Final test và lời kết
### Subsection 1: Final test và lời kết
Để tổng kết lại tất cả những nội dung của khóa học chúng ta sẽ có một cái bài tập cuối khóa như sau. Rồi chúng ta sẽ có một cái bài tập cuối khóa liên quan đến quản lý điểm học sinh. Yêu cầu: hãy tạo một chương trình Python để quản lý điểm học sinh, chương trình cần cung cấp các chức năng như sau:
Thứ nhất thêm điểm học sinh, người dùng có thể thêm điểm cho một học sinh mới vào hệ thống bao gồm tên học sinh và điểm số 
Thứ 2 xem điểm học sinh, người dùng có thể xem điểm của tất cả học sinh trong hệ thống hiển thị tên học sinh và điểm số tương ứng
Số 3 tìm kiếm điểm học sinh, người dùng có thể tìm kiếm điểm của một học sinh dựa trên tên chương trình sẽ hiển thị điểm của học sinh tìm được 
Số 4 xóa điểm học sinh, người dùng có thể xóa điểm của một học sinh khỏi hệ thống dựa trên tên sau khi xóa chương trình sẽ cập nhật danh sách điểm
Các bạn hãy vận dụng tất cả những kiến thức đã học bao gồm biến các, câu lệnh rẽ nhánh và các câu lệnh lặp để thực hiện tốt các bài tập của khóa này. 
Sau khi hoàn thành bài tập thì các bạn có thể tham khảo thêm đáp án do Onlinica cung cấp. Chúc các bạn hoàn thành tốt bài tập.
Chúc mừng các bạn đã hoàn thành khóa học. Thông qua khóa học Python cơ bản với biến và vòng lặp, chúng ta đã học được cách sử dụng biến các câu lệnh cơ bản cũng như thực hiện những cái câu lệnh rẽ nhánh và câu lệnh lặp áp dụng vào trong những bài tập thực tế của mình. Tôi hi vọng thông qua khóa học các bạn nắm vững được cú pháp và nguyên tắc của ngôn ngữ lập trình Python, hiểu được tầm quan trọng của cách sử dụng biến vòng lặp để xây dựng những chương trình hiệu quả và linh hoạt.
Ngôn ngữ lập trình Python là một ngôn ngữ mạnh mẽ và đa dụng, nó không chỉ áp dụng trong lĩnh vực phát triển phần mềm nó còn áp dụng trong nhiều lĩnh vực khác ví dụ như là thiết kế web, phân tích dữ liệu hay là trí tuệ nhân tạo, với nền tảng về biến vòng lặp các bạn đủ khả năng để có thể tự tìm hiểu và phát triển thêm trong những lĩnh vực này. Hãy tiếp tục thực hành và xây dựng những dự án của riêng mình để phát triển kỹ năng lập trình về Python. Các bạn cũng có thể tìm hiểu thêm những công cụ hỗ trợ liên quan đến ngôn ngữ lập trình Python, cũng như tham gia vào các cộng đồng để có thể học hỏi những kinh nghiệm của người khác. Cuối cùng hãy luôn cập nhật những cái xu hướng mới, lĩnh vực công nghệ thông tin là lĩnh vực luôn luôn phát triển và thay đổi hàng ngày do đó việc học tập và nâng cao kỹ năng sẽ góp phần quan trọng trong cái việc phát triển sự nghiệp của chúng ta. Chúc các bạn thành công trong khóa học lập trình Python cơ bản với biến và phòng lập cảm ơn các bạn đã tham gia khóa học và hi vọng với những kiến thức đã học các bạn có thể áp dụng trong công việc và những dự án của mình.
Tôi là Trọng Nghĩa chúng ta đang cùng học tại Onlinica.