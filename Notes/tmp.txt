<app_structure>
  <overview>
    This application is a university department information system for TDTU (Ton Duc Thang University), focusing on the Faculty of Electrical and Electronic Engineering (FEEE). It features personnel information cards, program introduction cards, and detailed program information. The app uses Nuxt.js for server-side rendering and routing, Pinia for state management, and NuxtUI for the navigation component. The structure includes reusable base components, data fetching from JSON files, and modal functionality for displaying detailed program information.
  </overview>

  <component_list>
    

    

    
  </component_list>

  <pages>
    
    
  </pages>

  <layouts>
    
  </layouts>

  <routing>
    
    <lazy_loading>
      Implement lazy-loading for page components to improve initial load time
    </lazy_loading>
  </routing>







  <performance>
    <optimizations>
      - Implement lazy-loading for route components
      - Use Vue's keep-alive component for frequently accessed pages
      - Optimize images used in personnel and program cards
    </optimizations>
    <code_splitting>
      Use Nuxt.js automatic code splitting for route-based components
    </code_splitting>
  </performance>

  <testing>
    <unit_testing>
      Use Vue Test Utils and Jest for testing individual components
    </unit_testing>
    <e2e_testing>
      Implement Cypress for end-to-end testing of critical user flows
    </e2e_testing>
  </testing>

  <accessibility>
    <guidelines>
      - Ensure proper heading structure in all components
      - Use ARIA labels for interactive elements
      - Implement keyboard navigation for modal and card interactions
    </guidelines>
  </accessibility>

  <internationalization>
    <strategy>
      Implement vue-i18n for multi-language support if required in the future
    </strategy>
  </internationalization>

  <error_handling>
    <api_errors>
      Implement error handling for JSON data fetching with user-friendly error messages
    </api_errors>
    <application_errors>
      Use Vue's error boundaries to catch and display unexpected errors
    </application_errors>
  </error_handling>

  <security>
    <best_practices>
      - Implement input sanitization for any user input fields
      - Use HTTPS for all data transfers
    </best_practices>
  </security>

  <seo_optimization>
    <strategies>
      - Use Nuxt.js built-in meta tag management
      - Implement dynamic meta tags for personnel and program pages
    </strategies>
  </seo_optimization>

  <build_and_deployment>
    <build_optimization>
      Use Nuxt.js production build optimizations
    </build_optimization>
    <deployment>
      Deploy as a static site or server-side rendered application based on hosting requirements
    </deployment>
  </build_and_deployment>

</app_structure>

This structure provides a comprehensive blueprint for your TDTU FEEE department information system. Here are some additional notes on implementation:

1. For the BaseCardPersonnel and BaseCardProgramIntro components, use NuxtUI's UCard component as a base for consistent styling.

2. Implement the modal functionality for BaseCardProgramDetail using NuxtUI's UModal component.

3. For the navigation bar, use the UVerticalNavigation component as shown in your example. Adjust the links array to match your application's routes:

```vue
<script setup lang="ts">
const links = [{
  label: 'Personnel',
  icon: 'i-heroicons-users',
  to: '/tdtu/feee/personnel'
}, {
  label: 'Programs',
  icon: 'i-heroicons-academic-cap',
  to: '/tdtu/feee/programs'
}]
</script>

<template>
  <UVerticalNavigation :links="links" />
</template>
```

4. In the Programs page, use v-for to iterate through the program data and create BaseCardProgramIntro components. Implement a method to show the BaseCardProgramDetail in a modal when a card is clicked.

5. Use Pinia stores to manage the fetching and storing of personnel and program data from the JSON files.

6. Implement error handling for data fetching and display appropriate messages to users if data cannot be loaded.

7. Ensure that all components are responsive and work well on different screen sizes.

8. Implement proper accessibility features, including ARIA labels and keyboard navigation support.

---
<overview>
    This application is a university department information system for TDTU (Ton Duc Thang University), focusing on the Faculty of Electrical and Electronic Engineering (FEEE). It features personnel information cards, program introduction cards, and detailed program information. The app uses Nuxt.js for server-side rendering and routing, Pinia for state management, and NuxtUI for the navigation component. The structure includes reusable base components, data fetching from JSON files, and modal functionality for displaying detailed program information.
</overview>

Create the base components:
Create BaseCardPersonnel (components/TDTU/BaseCardPersonnel.vue):
- Use NuxtUI's UCard as a base.
- Implement props for faculty, name, position, major, email, office, and department.
- Design the layout to display all personnel information.
- Ensure responsive design for various screen sizes.

<component>
  <name>BaseCardPersonnel</name>
  <features>
    - Display personnel information
    - Responsive design
  </features>
  <props>
    - faculty: string (Faculty name)
    - name: string (Personnel name)
    - position: string (Job position)
    - major: string (Specialization)
    - email: string (Contact email)
    - office: string (Office location)
    - department: string (Department name)
  </props>
  <data>
    - No local data properties needed
  </data>
  <computed>
    - No computed properties needed
  </computed>
  <methods>
    - No methods needed
  </methods>
  <styling>
    - Use NuxtUI components for consistent styling
    - Implement responsive design for various screen sizes
  </styling>
  <accessibility>
    - Use appropriate ARIA labels for card elements
    - Ensure proper color contrast for readability
  </accessibility>
</component>

Create BaseCardProgramIntro (components/TDTU/BaseCardProgramIntro.vue):
- Use NuxtUI's UCard as a base.
- Implement props for faculty, studyField, link, programType, and educationLevel.
- Add a click event emitter to show details.
- Design the layout to display basic program information.
- Implement hover effects to indicate clickability.

<component>
  <name>BaseCardProgramIntro</name>
  <features>
    - Display basic program information
    - Clickable to show detailed information
  </features>
  <props>
    - faculty: string (Faculty name)
    - studyField: string (Field of study)
    - link: string (Program link)
    - programType: string (Type of program)
    - educationLevel: string (Level of education)
  </props>
  <emits>
    - click: emitted when card is clicked to show details
  </emits>
  <data>
    - No local data properties needed
  </data>
  <computed>
    - No computed properties needed
  </computed>
  <methods>
    - showDetails(): Emit click event with program data
  </methods>
  <styling>
    - Use NuxtUI components for consistent styling
    - Implement hover effects to indicate clickability
  </styling>
  <accessibility>
    - Use appropriate ARIA labels for card elements
    - Ensure keyboard navigation support
  </accessibility>
</component>

Create BaseCardProgramDetail (components/TDTU/BaseCardProgramDetail.vue):
- Design this component to be used within a modal.
- Implement props for all program details (faculty, studyField, link, programType, educationLevel, introduction, careerProspects, outcome, syllabub, admissionCandidates, registration, tuition, contact).
- Create a scrollable layout for long content.
- Ensure responsive design for modal content.

<component>
  <name>BaseCardProgramDetail</name>
  <features>
    - Display detailed program information
    - Responsive design for modal content
  </features>
  <props>
    - faculty: string (Faculty name)
    - studyField: string (Field of study)
    - link: string (Program link)
    - programType: string (Type of program)
    - educationLevel: string (Level of education)
    - introduction: string (Program introduction)
    - careerProspects: string (Career prospects)
    - outcome: string (Program outcomes)
    - syllabub: string (Program syllabus)
    - admissionCandidates: string (Admission requirements)
    - registration: string (Registration process)
    - tuition: string (Tuition information)
    - contact: string (Contact information)
  </props>
  <data>
    - No local data properties needed
  </data>
  <computed>
    - No computed properties needed
  </computed>
  <methods>
    - No methods needed
  </methods>
  <styling>
    - Use NuxtUI components for consistent styling
    - Implement scrollable content for long descriptions
  </styling>
  <accessibility>
    - Use appropriate ARIA labels for modal content
    - Ensure proper heading structure for screen readers
  </accessibility>
</component>

Set up Pinia stores:
a. Create personnelStore (stores/personnelStore.js):
- Define state for personnelList.
- Implement an action to fetch personnel data from /data/tdtu/feee/personnel.json.

b. Create programStore (stores/programStore.js):
- Define state for programList and selectedProgram.
- Implement actions to fetch program data from /data/tdtu/feee/programs.json and set the selected program.

Create the pages:
a. Create Personnel page (pages/tdtu/feee/personnel.vue):
- Use the personnelStore to fetch and display personnel data.
- Implement a v-for loop to create BaseCardPersonnel components for each personnel item.
<page>
  <name>Personnel</name>
  <route>/tdtu/feee/personnel</route>
  <description>Displays a list of personnel cards for the FEEE department</description>
  <components>
    - BaseCardPersonnel
  </components>
</page>

b. Create Programs page (pages/tdtu/feee/programs.vue):
- Use the programStore to fetch and display program data.
- Implement a v-for loop to create BaseCardProgramIntro components for each program.
- Add click handlers to show the BaseCardProgramDetail in a modal when a card is clicked.
- Implement the modal using NuxtUI's UModal component.

<page>
  <name>Programs</name>
  <route>/tdtu/feee/programs</route>
  <description>Displays a list of program introduction cards with modal for details</description>
  <components>
    - BaseCardProgramIntro
    - BaseCardProgramDetail (in modal)
  </components>
</page>

Implement the navigation:
- Create a default layout (layouts/default.vue) that includes the UVerticalNavigation component.
- Set up the navigation links for Personnel and Programs pages as shown in the previous response.

<layout>
  <name>DefaultLayout</name>
  <description>Main layout with navigation bar</description>
  <components>
    - UVerticalNavigation (from NuxtUI)
  </components>
</layout>

Set up routing:
- Ensure that Nuxt.js auto-generates routes based on the pages directory structure.
- Implement lazy-loading for route components to improve initial load time.
<structure>
  - /tdtu/feee/personnel -> Personnel page
  - /tdtu/feee/programs -> Programs page
</structure>


### Current
Implement API integration:
- Create a DataService (services/DataService.js) with methods to fetch personnel and program data from JSON files.
- Use this service in the Pinia store actions.
<data_management>
  <strategy>Use Pinia for state management and Composition API for local component state</strategy>
  <stores>
    <store>
      <name>personnelStore</name>
      <state>
        - personnelList: Personnel[] (List of personnel data)
      </state>
      <actions>
        - fetchPersonnelData(): Fetch personnel data from JSON file
      </actions>
    </store>
    <store>
      <name>programStore</name>
      <state>
        - programList: Program[] (List of program data)
        - selectedProgram: Program | null (Currently selected program for detail view)
      </state>
      <actions>
        - fetchProgramData(): Fetch program data from JSON file
        - setSelectedProgram(program: Program): Set the selected program for detail view
      </actions>
    </store>
  </stores>
</data_management>

<api_integration>
  <endpoints>
    - /data/tdtu/feee/personnel.json: Fetch personnel data
    - /data/tdtu/feee/programs.json: Fetch program data
  </endpoints>
  <services>
    <service>
      <name>DataService</name>
      <methods>
        - fetchPersonnelData(): Fetch personnel JSON data
        - fetchProgramData(): Fetch program JSON data
      </methods>
    </service>
  </services>
</api_integration>
###

Style the application:
- Use NuxtUI components and utilities for consistent styling.
- Customize the NuxtUI theme to match university branding if necessary.
- Implement additional CSS for custom styling needs.
<styling>
  <framework>NuxtUI for consistent component styling</framework>
  <theming_strategy>
    Use NuxtUI theme customization for university branding
  </theming_strategy>
  <responsive_design>
    <strategies>
      - Use NuxtUI's built-in responsive components
      - Implement custom media queries for specific layout adjustments
      - Ensure proper scaling of cards and modal on different devices
    </strategies>
  </responsive_design>
</styling>

9. Optimize performance:
- Ensure that all route components are lazy-loaded.
- Optimize images used in personnel and program cards.
- Implement Vue's keep-alive component for frequently accessed pages.

10. Implement error handling:
- Add try-catch blocks in data fetching actions.
- Create user-friendly error messages for data loading failures.
- Implement Vue error boundaries for unexpected application errors.

11. Enhance accessibility:
- Add appropriate ARIA labels to all interactive elements.
- Ensure proper heading structure in all components.
- Implement keyboard navigation for modal and card interactions.

12. Implement SEO optimizations:
- Use Nuxt.js built-in meta tag management.
- Add dynamic meta tags for personnel and program pages.

13. Set up testing:
- Configure Jest and Vue Test Utils for unit testing.
- Write unit tests for critical component functionality.
- Set up Cypress for end-to-end testing of key user flows.

14. Prepare for deployment:
- Run Nuxt.js production build.
- Test the production build locally.
- Prepare deployment scripts or configuration for your chosen hosting platform.

15. Final review and enhancements:
- Conduct a thorough review of all implemented features.
- Test responsiveness across various devices and screen sizes.
- Perform accessibility audits and make necessary improvements.
- Optimize for performance using Lighthouse or similar tools.

By following these steps, you'll be able to create a comprehensive TDTU FEEE department information system using Vue.js and Nuxt.js. Remember to commit your code regularly and test each component and feature as you build them. This approach will help you catch and fix issues early in the development process.